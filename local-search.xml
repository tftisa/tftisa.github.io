<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vim Tutor</title>
    <link href="/2024/11/03/Vim-Tutor/"/>
    <url>/2024/11/03/Vim-Tutor/</url>
    
    <content type="html"><![CDATA[<h1 id="VIM-Tutor"><a href="#VIM-Tutor" class="headerlink" title="VIM Tutor"></a>VIM Tutor</h1><h2 id="Press-x-to-delete-the-character-under-the-cursor"><a href="#Press-x-to-delete-the-character-under-the-cursor" class="headerlink" title="Press  x  to delete the character under the cursor."></a>Press  <code>x</code>  to delete the character under the cursor.</h2><p>Press  <code>x</code>  to delete the character under the cursor.</p><blockquote><p>To fix the errors, move the cursor until it is on top of the character to be deleted.</p><p>Then, Press the <code>x</code>  key to delete the unwanted character</p></blockquote><h2 id="Press-A-to-append-text"><a href="#Press-A-to-append-text" class="headerlink" title="Press  A  to append text."></a>Press  <code>A</code>  to append text.</h2><p>Move the cursor to the line in which you append text. Press  <code>A</code>  and type in the necessary additions.</p><blockquote><p>It does not matter on what character the cursor is in that line.</p></blockquote><h2 id="Type-dw-to-delete-a-word"><a href="#Type-dw-to-delete-a-word" class="headerlink" title="Type  dw  to delete a word."></a>Type  <code>dw</code>  to delete a word.</h2><p>Move the cursor to the beginning of a word that needs to be deleted. Then, Type <code>dw</code> to make the word disappear.</p><blockquote><p>The letter  d  will appear on the last line of the screen as you type it.  Vim is waiting for you to type  w .  If you see another character than  d  you typed something wrong; press  <ESC>  and start over.</p></blockquote><h2 id="Type-d-to-delete-to-the-end-of-the-line"><a href="#Type-d-to-delete-to-the-end-of-the-line" class="headerlink" title="Type  d$ to delete to the end of the line."></a>Type  <code>d$</code> to delete to the end of the line.</h2><h2 id="ON-OPERATORS-AND-MOTIONS"><a href="#ON-OPERATORS-AND-MOTIONS" class="headerlink" title="ON OPERATORS AND MOTIONS"></a>ON OPERATORS AND MOTIONS</h2><p>Many commands that change text are made from an operator and a motion.The format for a delete command with the  d  delete operator is as follows:</p><pre><code class="hljs">    d   motion</code></pre><p>  Where:</p><ul><li><p>d: is the delete operator.</p></li><li><p>motion: is what the operator will operate on (listed below).</p><p>A short list of motions:</p></li><li><p>w - until the start of the next word, EXCLUDING its first character.</p></li><li><p>e - to the end of the current word, INCLUDING the last character.</p></li><li><p>$ - to the end of the line, INCLUDING the last character.</p></li></ul><p>Thus typing  de  will delete from the cursor to the end of the word.</p><blockquote><p>Pressing just the motion while in Normal mode without an operator will move the cursor as specified.</p></blockquote><h2 id="USING-A-COUNT-FOR-A-MOTION"><a href="#USING-A-COUNT-FOR-A-MOTION" class="headerlink" title="USING A COUNT FOR A MOTION"></a>USING A COUNT FOR A MOTION</h2><p>Typing a number before a motion repeats it that many times.</p><ul><li><p>Type  2w  to move the cursor two words forward.</p></li><li><p>Type  3e  to move the cursor to the end of the third word forward.</p></li><li><p>Type  0  (zero) to move to the start of the line.</p></li></ul><h2 id="USING-A-COUNT-TO-DELETE-MORE"><a href="#USING-A-COUNT-TO-DELETE-MORE" class="headerlink" title="USING A COUNT TO DELETE MORE"></a>USING A COUNT TO DELETE MORE</h2><p>Typing a number with an operator repeats it that many times.</p><p>In the combination of the delete operator and a motion mentioned above you insert a count before the motion to delete more:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">d   <span class="hljs-built_in">number</span>   motion<br></code></pre></td></tr></table></figure><p>Type  d2w  to delete the two UPPER CASE words.</p><p>Type   2dd   to delete two lines.</p><h2 id="Type-p-to-put-previously-deleted-text-after-the-cursor"><a href="#Type-p-to-put-previously-deleted-text-after-the-cursor" class="headerlink" title="Type p  to put previously deleted text after the cursor"></a>Type <code>p</code>  to put previously deleted text after the cursor</h2><p>Type  dd  to delete the line and store it in a Vim register.Then, move the cursor to the line, ABOVE where the deleted line should go.Type <code>p</code>to put the line below the cursor.</p><h2 id="Type-rx-to-replace-the-character-at-the-cursor-with-x"><a href="#Type-rx-to-replace-the-character-at-the-cursor-with-x" class="headerlink" title="Type  rx  to replace the character at the cursor with  x"></a>Type  <code>rx</code>  to replace the character at the cursor with  x</h2><p>Move the cursor so that it is on top of the first error. Type<code>r</code>and then the character which should be there.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clean C Drive</title>
    <link href="/2024/08/11/Clean-C-Drive/"/>
    <url>/2024/08/11/Clean-C-Drive/</url>
    
    <content type="html"><![CDATA[<p>Clean C Drive In Windows 10</p><ul><li><p>windows + R</p><ul><li><code>prefetch</code>：delete all files in this folder</li><li><code>temp</code>: delete all files in this folder</li><li><code>%temp%</code>: delete all files in this folder</li></ul></li><li><p>go down to search box, then type <code>Defragment and Optimize Drives</code>，then click <code>Optimize</code> button, and close the window.</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2024/07/28/Maven/"/>
    <url>/2024/07/28/Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="一、maven镜像"><a href="#一、maven镜像" class="headerlink" title="一、maven镜像"></a>一、maven镜像</h2><h3 id="1-1-镜像仓库配置"><a href="#1-1-镜像仓库配置" class="headerlink" title="1.1 镜像仓库配置"></a>1.1 镜像仓库配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-本地仓库配置"><a href="#1-2-本地仓库配置" class="headerlink" title="1.2 本地仓库配置"></a>1.2 本地仓库配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;localRepository&gt;D:\Java\Maven Repo&lt;/localRepository&gt;<br></code></pre></td></tr></table></figure><h2 id="二、相关命令"><a href="#二、相关命令" class="headerlink" title="二、相关命令"></a>二、相关命令</h2><ul><li><strong>validate</strong>: validate the project is correct and all necessary information is available</li><li><strong>compile</strong>: compile the source code of the project</li><li><strong>test</strong>: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li><li><strong>package</strong>: take the compiled code and package it in its distributable format, such as a JAR.</li><li><strong>integration-test</strong>: process and deploy the package if necessary into an environment where integration tests can be run</li><li><strong>verify</strong>: run any checks to verify the package is valid and meets quality criteria</li><li><strong>install</strong>: install the package into the local repository, for use as a dependency in other projects locally</li><li><strong>deploy</strong>: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.</li></ul><p>There are two other Maven lifecycles of note beyond the <em>default</em> list above. They are</p><ul><li><p><strong>clean</strong>: cleans up artifacts created by prior builds</p></li><li><p><strong>site</strong>: generates site documentation for this project</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/2024/07/10/nginx/"/>
    <url>/2024/07/10/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一、Nginx的安装与初步使用"><a href="#一、Nginx的安装与初步使用" class="headerlink" title="一、Nginx的安装与初步使用"></a>一、Nginx的安装与初步使用</h2><h3 id="1-1-Nginx安装"><a href="#1-1-Nginx安装" class="headerlink" title="1.1 Nginx安装"></a>1.1 Nginx安装</h3><p>This section applies to Red Hat Enterprise Linux and its derivatives such as CentOS, Oracle Linux, Rocky Linux, AlmaLinux.</p><p>Install the prerequisites:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> yum-utils<br></code></pre></td></tr></table></figure><p>To set up the yum repository, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx-stable]</span><br><span class="hljs-attr">name</span>=nginx stable repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[nginx-mainline]</span><br><span class="hljs-attr">name</span>=nginx mainline repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/mainline/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>By default, the repository for stable nginx packages is used. If you would like to use mainline nginx packages, run the following command:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">sudo yum-<span class="hljs-built_in">config</span>-manager <span class="hljs-comment">--enable nginx-mainline</span><br></code></pre></td></tr></table></figure><p>To install nginx, run the following command:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p>When prompted to accept the GPG key, verify that the fingerprint matches <code>573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62</code>, and if so, accept it.</p><blockquote><p>禁止更新：我们在安装之后，为了能够正常运行，我们一般会禁止Nginx进行更新。因为在yum更新了Nginx之后，Nginx会自动重启。这对于我们来说是没有必要的，所以我们可以屏蔽更新。我们可以这样，将下列指定放到你的<code>/etc/yum.conf</code>文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">exclude=nginx<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-2-Nginx相关命令"><a href="#1-2-Nginx相关命令" class="headerlink" title="1.2 Nginx相关命令"></a>1.2 Nginx相关命令</h3><p>启动</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> nginx<br></code></pre></td></tr></table></figure><p>重启</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart nginx</span><br></code></pre></td></tr></table></figure><p>测试配置文件语法是否正确</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br></code></pre></td></tr></table></figure><p>重载配置文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl reload nginx</span><br></code></pre></td></tr></table></figure><p>停止</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop nginx<br></code></pre></td></tr></table></figure><p>启动开机启动</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> nginx<br></code></pre></td></tr></table></figure><p>禁止开机启动</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl diasble nginx</span><br></code></pre></td></tr></table></figure><h2 id="二、正向代理、反向代理、负载均衡和动静分离"><a href="#二、正向代理、反向代理、负载均衡和动静分离" class="headerlink" title="二、正向代理、反向代理、负载均衡和动静分离"></a>二、正向代理、反向代理、负载均衡和动静分离</h2><h3 id="2-1-正向代理"><a href="#2-1-正向代理" class="headerlink" title="2.1 正向代理"></a>2.1 正向代理</h3><p>如果把局域网外的Internet想象成一个巨大的资源库，那么局域网中的客户端要访问Internet，则需要通过代理服务来访问，这种代理访问叫做正向代理</p><p>例如通过客户端（浏览器）访问Google需要代理服务器，在客户端（浏览器）这边需要配置好代理服务器，然后通过代理服务器来访问Google</p><h3 id="2-2-反向代理"><a href="#2-2-反向代理" class="headerlink" title="2.2 反向代理"></a>2.2 反向代理</h3><p>反向代理，客户端不需要配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器地址</p><img src="C:/Users/Ecifics/Desktop/Recent Files/笔记/assets/反向代理.png" align="left"><h3 id="2-3-负载均衡"><a href="#2-3-负载均衡" class="headerlink" title="2.3 负载均衡"></a>2.3 负载均衡</h3><p>当访问量十分大的时候，单个服务器无法解决，我们可以增加服务器的数量，将请求平均分发到各个服务器上，将原先请求集中到单个服务器的情况改为请求分发到多个服务器上，就是<strong>负载均衡</strong></p><h3 id="2-4-动静分离"><a href="#2-4-动静分离" class="headerlink" title="2.4 动静分离"></a>2.4 动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力</p><h2 id="三、Nginx配置文件"><a href="#三、Nginx配置文件" class="headerlink" title="三、Nginx配置文件"></a>三、Nginx配置文件</h2><h3 id="3-1-配置文件内容"><a href="#3-1-配置文件内容" class="headerlink" title="3.1 配置文件内容"></a>3.1 配置文件内容</h3><p>位置<code>/usr/local/nginx/conf/nginx.conf</code>其实#后面的是注释，下面内容中已经将注释删除掉了</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>        <br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;   <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-配置文件组成"><a href="#3-2-配置文件组成" class="headerlink" title="3.2 配置文件组成"></a>3.2 配置文件组成</h3><h4 id="（1）全局块"><a href="#（1）全局块" class="headerlink" title="（1）全局块"></a>（1）全局块</h4><p>从配置文件开始到<code>events</code>之间的内容</p><p>主要设置一些会影响nginx服务器整体运行的配置指令吗，主要包括配置运行nginx服务器的用户组、允许生成的worker process数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等</p><p>对应上面配置文件中的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">worker_processes  <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>表示nginx服务器并发处理服务的关键配置，worker_processes越大，可支持的并发处理量越多（但是数量不要超过服务器具体的内核数，否则没有意义）</p><h4 id="（2）events块"><a href="#（2）events块" class="headerlink" title="（2）events块"></a>（2）events块</h4><p>涉及的指令主要影响nginx服务器与用户的网络连接，常用的设置包括开启对多 work_process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个worker_process可以同时支持的最大连接数等</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">events &#123;<br>    worker_connections  <span class="hljs-number">1024</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>表示 每个worker_process 支持的最大连接数为 1024</p><p>这部分配置对Nginx的影响最大</p><h4 id="（3）http块"><a href="#（3）http块" class="headerlink" title="（3）http块"></a>（3）http块</h4><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。 需要注意的是：http 块也可以包括 http 全局块、server 块。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>        <br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;   <br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>http 全局块 <ul><li>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</li></ul></li><li>server 块 <ul><li>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。 </li><li>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 </li><li>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。 <ul><li>全局 server 块 <ul><li>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</li></ul></li><li>location 块 <ul><li>一个 server 块可以配置多个 location 块。 </li><li>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name&#x2F;uri-string），对虚拟主机名称 （也可以是 IP 别名）之外的字符串（例如 前面的 &#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</li></ul></li></ul></li></ul></li></ul><h2 id="四、反向代理实例1"><a href="#四、反向代理实例1" class="headerlink" title="四、反向代理实例1"></a>四、反向代理实例1</h2><h3 id="4-1-实现效果"><a href="#4-1-实现效果" class="headerlink" title="4.1 实现效果"></a>4.1 实现效果</h3><p>打开浏览器，在浏览器地址栏输入<a href="http://www.123.com,跳转到/">www.123.com，跳转到</a> liunx 系统 tomcat 主页面中 </p><h3 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h3><ul><li><p>准备tomcat</p><ul><li><p>在 liunx 系统安装 tomcat，使用默认端口 8080 * </p></li><li><p>tomcat 安装文件放到 liunx 系统中，解压 </p></li><li><p>进入 tomcat 的 bin 目录中，.&#x2F;startup.sh 启动 tomcat 服务器</p></li></ul></li><li><p>对外开放访问的端口 </p><ul><li><code>firewall-cmd --add-port=8080/tcp --permanent </code></li><li><code>systemctl restart firewalld.service</code> 重启防火墙使配置生效</li><li>查看已经开放的端口号 <code>firewall-cmd --list-all</code></li></ul></li></ul><blockquote><p>注：运行tomcat需要有jdk环境</p><ul><li><p>去官网下载安装包<code>jdk-8u202-linux-x64.rpm</code>，然后传到linux下&#x2F;opt&#x2F;目录</p></li><li><p>运行<code>sudo yum install -y jdk-8u202-linux-x64.rpm </code>命令</p></li><li><p>更改配置文件，<code>vim /etc/profile</code>，在最后面加上（第一行名字和具体的jdk安装包名字对应）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_202-amd64</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar</span><br></code></pre></td></tr></table></figure><ul><li>使配置生效<code>source /etc/profile</code></li><li>查看jdk版本 <code>java -version</code></li></ul></blockquote><h3 id="4-3-详细配置"><a href="#4-3-详细配置" class="headerlink" title="4.3 详细配置"></a>4.3 详细配置</h3><h4 id="（1）在Windows系统中的hosts文件进行域名和ip对应关系的配置"><a href="#（1）在Windows系统中的hosts文件进行域名和ip对应关系的配置" class="headerlink" title="（1）在Windows系统中的hosts文件进行域名和ip对应关系的配置"></a>（1）在Windows系统中的hosts文件进行域名和ip对应关系的配置</h4><p>hosts文件文件路径：<code>‪C:\Windows\System32\drivers\etc\hosts</code></p><p>在hosts文件末尾加上</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">106.13.226.131</span> www.<span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure><p>此时可以通过 <a href="http://www.123.com的8080端口访问tomcat主页面/">www.123.com的8080端口访问tomcat主页面</a></p><h4 id="（2）-在Nginx进行请求转发配置"><a href="#（2）-在Nginx进行请求转发配置" class="headerlink" title="（2） 在Nginx进行请求转发配置"></a>（2） 在Nginx进行请求转发配置</h4><p>修改server_name为服务器ip，location中添加proxy_pass属性，当访问80端口时，转发到8080端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  <span class="hljs-number">106.13</span><span class="hljs-number">.226</span><span class="hljs-number">.131</span>;<br><br>    #charset koi8-r;<br><br>    #access_log  logs/host.access.log  main;<br><br>    location / &#123;<br>        root   html;<br>        proxy_pass http:<span class="hljs-comment">//127.0.0.1:8080;</span><br>        index  index.html index.htm;<br>    &#125;<br><br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><p>然后重新加载服务器配置<code>./nginx -s reload</code></p><p>最后输入<a href="http://www.123.com即可看到tomcat主页(如果显示的是nginx主页可以刷新一下)/">www.123.com即可看到tomcat主页（如果显示的是nginx主页可以刷新一下）</a></p><h2 id="五、反向代理实例2"><a href="#五、反向代理实例2" class="headerlink" title="五、反向代理实例2"></a>五、反向代理实例2</h2><h3 id="5-1-实现效果"><a href="#5-1-实现效果" class="headerlink" title="5.1 实现效果"></a>5.1 实现效果</h3><p>使用nginx反向代理，根据访问的路径跳转到不同端口的服务中，nginx监听端口为9001</p><p>例如 访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8080 端口</p><p>​ 访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8081 端口</p><h3 id="5-2-准备工作"><a href="#5-2-准备工作" class="headerlink" title="5.2 准备工作"></a>5.2 准备工作</h3><ul><li>准备两个服务器，一个8080端口，一个8081端口，第二个服务器需要修改conf目录下 server.xml 文件中<strong>所有</strong>端口号</li><li>创建页面文件<ul><li>在8080端口对应的tomcat&#x2F;webapps&#x2F;目录下创建文件夹edu，在这个文件夹中放上相应的页面a.html，可以通过 <a href="http://106.13.226.131:8080/edu/a.html">http://106.13.226.131:8080/edu/a.html</a> 访问</li><li>在8081端口对应的tomcat&#x2F;webapps&#x2F;目录下创建文件夹vod，在这个文件夹下放入页面a.html，可以通过 <a href="http://106.13.226.131:8081/vod/a.html">http://106.13.226.131:8081/vod/a.html</a> 访问</li></ul></li></ul><h3 id="5-3-具体配置"><a href="#5-3-具体配置" class="headerlink" title="5.3 具体配置"></a>5.3 具体配置</h3><p>找到nginx配置文件nginx.con，加入server块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">server &#123;<br>    listen          <span class="hljs-number">9001</span>;<br>    server_name     <span class="hljs-number">106.13</span><span class="hljs-number">.226</span><span class="hljs-number">.131</span>;<br><br>    location ~ /edu/ &#123;<br>        proxy_pass  http:<span class="hljs-comment">//106.13.226.131:8080;</span><br>    &#125;<br><br>    location ~ /vod/ &#123;<br>        proxy_pass  http:<span class="hljs-comment">//106.13.226.131:8081;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中location后面<code>~ /edu/</code>是正则表达式，表示url中含有edu的请求，其中listen表示监听的端口号</p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 8</title>
    <link href="/2024/07/10/Java%208/"/>
    <url>/2024/07/10/Java%208/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-8-Feature"><a href="#Java-8-Feature" class="headerlink" title="Java 8 Feature"></a>Java 8 Feature</h1><h2 id="一、函数式接口"><a href="#一、函数式接口" class="headerlink" title="一、函数式接口"></a>一、函数式接口</h2><h3 id="1-1-常用函数式接口"><a href="#1-1-常用函数式接口" class="headerlink" title="1.1 常用函数式接口"></a>1.1 常用函数式接口</h3><table><thead><tr><th align="center">接口名称</th><th align="center">方法名称</th><th align="center">接收的参数类型</th><th align="center">返回类型</th></tr></thead><tbody><tr><td align="center">Predicate</td><td align="center">test</td><td align="center">T</td><td align="center">boolean</td></tr><tr><td align="center">Consumer</td><td align="center">accept</td><td align="center">T</td><td align="center">void</td></tr><tr><td align="center">Function</td><td align="center">apply</td><td align="center">T</td><td align="center">R</td></tr><tr><td align="center">Supplier</td><td align="center">get</td><td align="center">void</td><td align="center">T</td></tr></tbody></table><blockquote><p>使用函数是变成会有自动拆箱和装箱的过程，装箱需要把基本类型包裹起来，并保存在堆中，所以<strong>装箱后需要更多的内存</strong></p><p>如果想要避免拆箱和装箱操作，可以使用针对专门的输入参数类型的函数是接口，例如IntPredicat、IntFunction、IntToDoubleFunction等等</p></blockquote><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul><li><p>Java 8 提供的函数式接口是不允许抛出Exception及其子（checked exception），如果想要抛出异常有两种方法</p><ul><li><p>定义一个自己的函数式接口，并抛出异常</p><ul><li><pre><code class="java">@FunctionalInterfacepublic interface BufferedReaderProcessor &#123;    String process(BufferedReader b) throws IOException;&#125;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>+ 在使用的时候将Lambda包裹在<span class="hljs-keyword">try</span>/<span class="hljs-keyword">catch</span>块中：<br><br>  + ```<span class="language-javascript">java</span><br><span class="language-javascript">    <span class="hljs-title class_">Function</span>&lt;<span class="hljs-title class_">BufferedReader</span>, <span class="hljs-title class_">String</span>&gt; f = (<span class="hljs-title class_">BufferedReader</span> bf) -&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> b.<span class="hljs-title function_">readLine</span>();</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">IOException</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br></code></pre></td></tr></table></figure></code></pre></li><li></li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Se</title>
    <link href="/2024/07/10/Java%20Se/"/>
    <url>/2024/07/10/Java%20Se/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-SE"><a href="#Java-SE" class="headerlink" title="Java SE"></a>Java SE</h1><h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><h3 id="1-1-隐式参数和显示参数"><a href="#1-1-隐式参数和显示参数" class="headerlink" title="1.1 隐式参数和显示参数"></a>1.1 隐式参数和显示参数</h3><p>实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent / <span class="hljs-number">100</span>;<br>salary += raise;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中方法<code>raiseSalary</code>有两个参数，一个是<strong>显示参数</strong>，即方法名后括号类的<code>byPercent</code>变量；另一个是<strong>隐式参数</strong>，是该方法所属的对象，也可能是出现在方法名前面的对象，例如<code>x.f(args)</code>中x就是隐式参数，用关键值<code>this</code>来表示，因此上述代码可写成下面这种形式将实例字段和局部变量区别开来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.salary * byPercent / <span class="hljs-number">100</span>;<br><span class="hljs-built_in">this</span>.salary += raise;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-getter方法使用注意事项"><a href="#1-2-getter方法使用注意事项" class="headerlink" title="1.2 getter方法使用注意事项"></a>1.2 getter方法使用注意事项</h3><p><strong>不要编写*返回可变对象（即放回对象自带setter方法）引用的访问器方法</strong>，例如如下Employee类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> Date hireDay;<br>    <br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>Date</code>类中有一个setter方法<code>setTime()</code>，可以设置毫秒数。从getter方法返回的Date对象和Employee对象中的Date对象引用同一个Date对象，故如何调用返回的Date对象中的<code>setTime()</code>方法，会造成Employee对象中所引用的Date方法对应的属性值发生改变，严重破坏了类的封装性</p><h3 id="1-3-静态字段"><a href="#1-3-静态字段" class="headerlink" title="1.3 静态字段"></a>1.3 静态字段</h3><p>如果将一个字段定义为static，每个<strong>类</strong>（注意是类不是对象）只有一个这样的字段。对于非静态的实例字段，每个对象都有自己的一个副本，例如下面示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">nextId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>        setId();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">()</span> &#123;<br>        id = nextId++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个Employee对象都会有一个自己的<code>id</code>字段，但是这些对象共享同一个<code>nextId</code>字段。也就是如果有1000个Employee对象，它们的id字段值可以有1000种不同的值，但是所有对象的<code>nextId</code>的值都是相同的。即使没有Employee对象，静态字段<code>nextId</code>也存在。<strong>静态字段属于类，不属于任何单个的对象</strong></p><h3 id="1-4-类和对象的初始化顺序"><a href="#1-4-类和对象的初始化顺序" class="headerlink" title="1.4 类和对象的初始化顺序"></a>1.4 类和对象的初始化顺序</h3><ul><li><p>类的初始化</p><ul><li>首先初始化其父类的static字段和static块</li><li>初始化该类的static字段或者static块</li></ul></li><li><p>子类构造函数（第一行默认调用super()来调用父类构造函数，故需要跳到第三步）</p></li><li><p>父类构造函数</p></li><li><p>继续子类的构造函数</p></li></ul><h3 id="1-5-类之间的关系"><a href="#1-5-类之间的关系" class="headerlink" title="1.5 类之间的关系"></a>1.5 类之间的关系</h3><ul><li>依赖（use-a）<ul><li>如果一个类的方法使用或者操纵了另一个类的对象，我们说一个类依赖于另一个类</li><li>竟可能减少相互依赖的类，从而减少类之间的耦合</li></ul></li><li>聚合（has-a）<ul><li>一个类包含了另一个类对象</li></ul></li><li>继承（is-a）</li></ul><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="2-1-对象方法调用的过程"><a href="#2-1-对象方法调用的过程" class="headerlink" title="2.1 对象方法调用的过程"></a>2.1 对象方法调用的过程</h3><p>假设要调用<code>x.f(args)</code>，隐式参数x声明为类C的一个对象</p><h4 id="2-1-1-编译器查看对象的声明类型和方法名。"><a href="#2-1-1-编译器查看对象的声明类型和方法名。" class="headerlink" title="2.1.1 编译器查看对象的声明类型和方法名。"></a>2.1.1 编译器查看对象的声明类型和方法名。</h4><p>需要注意的是：有可能存在多个方法名称相同但参数类型不一样的方法，例如存在方法<code>f(int)</code>和<code>f(String)</code>。编译器会一一列举出类中所有名为<code>f</code>的方法<strong>和其父类</strong>中所有名为f的<strong>可访问(非私有方法)的方法</strong></p><h4 id="2-1-2-编译器确定方法调用提供的参数类型"><a href="#2-1-2-编译器确定方法调用提供的参数类型" class="headerlink" title="2.1.2 编译器确定方法调用提供的参数类型"></a>2.1.2 编译器确定方法调用提供的参数类型</h4><p>如果在所有名为f的方法中存在一个与所提供的参数类型完全匹配的方法，就选择这个方法，这个过程称为<strong>重载解析</strong>（overloading resolution）。如果编译器没有找到与参数类型匹配的方法，或者发现经过类转型后有多个方法与之匹配，编译器就会报告一个错误</p><h4 id="2-1-3-绑定"><a href="#2-1-3-绑定" class="headerlink" title="2.1.3 绑定"></a>2.1.3 绑定</h4><p>如果是private方法、static方法、final方法或者构造器，那么编译器可以准确地知道应该调用哪个方法，这称为<strong>静态绑定</strong>（static binding）。与此对应的是，如果要调用的方法依赖于隐式参数的实际类型（也就是对象所属的类，例如Employee对象属于Employee类），那么必须在运行时使用动态绑定（dynamic binding），即在运行时能够自动地选择适当的方法</p><h4 id="2-1-4"><a href="#2-1-4" class="headerlink" title="2.1.4"></a>2.1.4</h4><p>程序运行并蚕蛹动态绑定的调用方法时，虚拟机必须调用与x所应用对象的实际类型对应的那个方法。假设x的实际类型是D，它是C类的子类。如果D类定义了方法<code>f(String)</code>，就会调用这个方法；否则，将在D类的父类中寻找<code>f(String)</code>，以此类推</p><blockquote><p>注：</p><p>每次调用方法都要完成这个搜索，时间开销相当大。因此，虚拟机预先为每个类计算了一个方法表（method table），其中列出了所有方法的签名和要调用的实际方法。这样一来，在真正调用方法的时候，虚拟机仅查找这个表就行了。</p><p>例如，虚拟机搜索D类的方法表，寻找与调用<code>f(String)</code>相匹配的方法。这个方法既有可能是<code>D.f(String)</code>，也有可能是<code>X.f(String）</code>，这里的X是D的某个超类。如果调用的是<code>super.f(param)</code>，那么编译器将对隐式参数父类的方法进行搜索</p></blockquote><h3 id="2-2-覆盖方法注意事项"><a href="#2-2-覆盖方法注意事项" class="headerlink" title="2.2 覆盖方法注意事项"></a>2.2 覆盖方法注意事项</h3><p>在覆盖一个方法的时候，子类方法的可见性<strong>不能低于</strong>父类方法所对应方法的可见性。例如父类方法中是public，子类方法也必须是public</p><h3 id="2-3-final类和方法"><a href="#2-3-final类和方法" class="headerlink" title="2.3 final类和方法"></a>2.3 final类和方法</h3><h4 id="2-3-1-final类"><a href="#2-3-1-final类" class="headerlink" title="2.3.1 final类"></a>2.3.1 final类</h4><p>如果希望某个类无法被继承，可以使用final修饰符修饰类，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Executive</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Manager</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>此时Executive类无法被其他子类继承</p><h4 id="2-3-2-final方法"><a href="#2-3-2-final方法" class="headerlink" title="2.3.2 final方法"></a>2.3.2 final方法</h4><p>如果类中某个特定方法不想让子类覆盖，可以将其声明为final，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-父类强制转换成子类之前，需要使用instanceof进行检查"><a href="#2-4-父类强制转换成子类之前，需要使用instanceof进行检查" class="headerlink" title="2.4 父类强制转换成子类之前，需要使用instanceof进行检查"></a>2.4 父类强制转换成子类之前，需要使用instanceof进行检查</h3><p>例如对于下面程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Manager</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Carl Cracker&quot;</span>, <span class="hljs-number">80000</span>, <span class="hljs-number">1987</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br>boss.setBonus(<span class="hljs-number">5000</span>);<br><br>Employee[] employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">3</span>];<br><br>employees[<span class="hljs-number">0</span>] = boss;<br>employees[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Harry Hacker&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">1989</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br>employees[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tommy Tester&quot;</span>, <span class="hljs-number">40000</span>, <span class="hljs-number">1990</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure><p>如果要将employees[0]强转回Manager类型，需要使用instanceof进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (employees[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> Manager) &#123;<br>    boss = (Manager) staff[<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-抽象类注意事项"><a href="#2-5-抽象类注意事项" class="headerlink" title="2.5 抽象类注意事项"></a>2.5 抽象类注意事项</h3><ul><li><p>抽象类既可以包含抽象方法，也可以包含字段和具体方法</p></li><li><p>扩展抽象类可以有两种选择</p><ul><li>在子类中保留抽象类中的部分或所有抽象方法仍未定义，这样必须将子类也标记为抽象类</li><li>在子类中定义全部的方法，这样子类就不需要标记为抽象方法了</li></ul></li><li><p>抽象类<strong>不能实例化</strong>，也就是说如果将一个类声明为<code>abstract</code>，就不能创建这个类的对象（即new一个抽象类对象）</p></li><li><p>可以创建抽象类的对象变量，但是这样一个变量<strong>只能</strong>引用非抽象子类的对象，例如抽象类Person有一个非抽象子类对象Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Vince Vu&quot;</span>, <span class="hljs-string">&quot;Economics&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-6-访问控制修饰符"><a href="#2-6-访问控制修饰符" class="headerlink" title="2.6 访问控制修饰符"></a>2.6 访问控制修饰符</h3><ul><li>private - 仅对本类可见</li><li>public - 对外部完全可见</li><li>protected - 对本包和所有子类可见</li><li>默认（不需要修饰符）- 对本包可见</li></ul><h3 id="2-7-多态"><a href="#2-7-多态" class="headerlink" title="2.7 多态"></a>2.7 多态</h3><p>我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.count);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.count);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldMethodTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>System.out.println(s.count);<span class="hljs-comment">//20</span><br>s.display();<span class="hljs-comment">//20</span><br><br><span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s;<span class="hljs-comment">//多态性</span><br><span class="hljs-comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span><br>System.out.println(b == s);<span class="hljs-comment">//true</span><br>System.out.println(b.count);<span class="hljs-comment">//10</span><br>b.display();<span class="hljs-comment">//20</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若子类重写了父类方法，就意味着子类里面定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边</p><p><strong>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边</strong></p><h2 id="三、-接口"><a href="#三、-接口" class="headerlink" title="三、 接口"></a>三、 接口</h2><h3 id="3-1-接口的属性"><a href="#3-1-接口的属性" class="headerlink" title="3.1 接口的属性"></a>3.1 接口的属性</h3><ul><li>接口的方法始终是public，故可以省略public声明</li><li>接口中的字段始终是public static final</li></ul><h3 id="3-2-克隆"><a href="#3-2-克隆" class="headerlink" title="3.2 克隆"></a>3.2 克隆</h3><h4 id="3-2-1-浅克隆"><a href="#3-2-1-浅克隆" class="headerlink" title="3.2.1 浅克隆"></a>3.2.1 浅克隆</h4><p>如果对象的成员变量是基本数据类型，则拷贝它的值到新的对象中；如果是引用类型，则共享同一个引用对象</p><p>实现方法是直接调用Objects类中的clone()方法，具体步骤如下 </p><ul><li>实现<code>Cloneable</code>接口</li><li>将<code>clone()</code>方法重新定义为public（如果是原来的protected，在其他包下，无法使用对象的<code>clone()</code>方法）</li><li>调用<code>super.clone()</code></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Employee) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-1-深克隆"><a href="#3-2-1-深克隆" class="headerlink" title="3.2.1 深克隆"></a>3.2.1 深克隆</h4><p>和浅克隆相比，除了拷贝基本变量的值，对于引用对象，也会重新生成一个新的引用对象，不会和原来的被克隆对象共享同一个引用对象</p><p>和浅克隆的实现相比，需要将类中的引用对象也克隆一份，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">cloned</span> <span class="hljs-operator">=</span> (Employee) <span class="hljs-built_in">super</span>.clone();<br>        <br>        cloned.hireDay = (Date) hireDay.clone();<br>        <br>        <span class="hljs-keyword">return</span> cloned;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中hireDay也是引用对象，故需要重新克隆一份</p><h2 id="四、异常"><a href="#四、异常" class="headerlink" title="四、异常"></a>四、异常</h2><h3 id="4-1-异常分类"><a href="#4-1-异常分类" class="headerlink" title="4.1 异常分类"></a>4.1 异常分类</h3><p>所有的异常对象都是继承Throwable类的一个类实例</p><p>Throwable</p><ul><li>Error：描述了Java运行时系统的内部错误和资源耗尽错误</li><li>Exception<ul><li>RuntimeException：如果出现RuntimeException，那么一定是你的问题<ul><li>错误的强制类型转换</li><li>数组访问越界</li><li>访问null指针</li></ul></li><li>其他异常<ul><li>IOException<ul><li>试图超越文件末尾继续读取数据</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象，而这个字符串表示并不存在</li></ul></li><li>…</li></ul></li></ul></li></ul><p>其中Error类和RuntimeException类的所有异常称为<strong>非检查型（unchecked）异常</strong>，所有其他的异常称为<strong>检查型（checked）异常</strong>。编译器会检查你是否为所有的检查型异常提供了异常处理器</p><h3 id="4-2-抛出异常的情况"><a href="#4-2-抛出异常的情况" class="headerlink" title="4.2 抛出异常的情况"></a>4.2 抛出异常的情况</h3><p>下面4中情况会抛出异常</p><ul><li>调用了一个抛出检查型异常的方法</li><li>检查到一个错误，并且利用throw语句抛出一个检查型异常</li><li>程序出现错误，例如 <code>a[-1]=0</code> 会抛出一个非检查型异常</li><li>Java虚拟机或运行时库出现内部错误（从Error继承的异常）</li></ul><blockquote><p>注：</p><p>如果出现前两种情况，则必须告诉调用这个方法的程序员有可能抛出异常</p><p>也就是说，一个方法必须声明所有可能抛出的检查型异常，而非检查异常要么在控制之外（例如Error），要么是从一开始就应该避免的情况所导致的（例如RuntimeException）</p><p>如果方法没有声明所有可能发生的检查型异常，编译器就会发出一个错误消息</p></blockquote><h3 id="4-3-异常处理规则"><a href="#4-3-异常处理规则" class="headerlink" title="4.3 异常处理规则"></a>4.3 异常处理规则</h3><p>如果编写的一个方法覆盖了父类的方法，而这个父类的方法没有抛出异常，你就必须捕获（try-catch）你的方法代码中出现的每一个检查型异常。也就是说，不允许在子类的throws说明符中出现父类方法未列出的异常类</p><h2 id="五、泛型"><a href="#五、泛型" class="headerlink" title="五、泛型"></a>五、泛型</h2><h3 id="5-1-定义泛型类"><a href="#5-1-定义泛型类" class="headerlink" title="5.1 定义泛型类"></a>5.1 定义泛型类</h3><p>需要引入一个类型变量T，用尖括号<code>&lt;&gt;</code>括起来，并且放在类名的后面，示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> T first;<br><br>    <span class="hljs-keyword">private</span> T second;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">()</span> &#123;<br>        first = <span class="hljs-literal">null</span>;<br>        second = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T first, T second)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>        <span class="hljs-built_in">this</span>.second = second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getSecond</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> second;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirst</span><span class="hljs-params">(T first)</span> &#123;<br>        <span class="hljs-built_in">this</span>.first = first;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(T second)</span> &#123;<br>        <span class="hljs-built_in">this</span>.second = second;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，也可以有多个类型变量，例如可以这样定义泛型类Pair</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T, U&gt; &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样T和U可以是两个不同的类型</p><blockquote><p>注：</p><p>如果定义了泛型类，但是实例化的时候没有指定具体的泛型类型，则认为此泛型类型为Object，例如直接<code>new Pair()</code>而不是new <code>Pair&lt;String&gt;()</code>的形式创建实例化对象，其中的成员变量first和second会变成Object类型</p></blockquote><h3 id="5-2-泛型类的继承"><a href="#5-2-泛型类的继承" class="headerlink" title="5.2 泛型类的继承"></a>5.2 泛型类的继承</h3><h4 id="5-2-1-继承时指明了父类的泛型类型"><a href="#5-2-1-继承时指明了父类的泛型类型" class="headerlink" title="5.2.1 继承时指明了父类的泛型类型"></a>5.2.1 继承时指明了父类的泛型类型</h4><p>如果子类继承泛型父类，并且指明了父类泛型类型，那么实例化子类对象时，不再需要致命子类对象的泛型，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubPair</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pair</span>&lt;String&gt; &#123;<br>    ...<br>&#125; <br></code></pre></td></tr></table></figure><p>此时实例化<code>SubPair</code>对象的时候，不需要在指定泛型，此时SubPair不再是泛型类，变成一个普通的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SubPair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubPair</span>();<br></code></pre></td></tr></table></figure><h4 id="5-2-2-继承时未指明父类的泛型类型"><a href="#5-2-2-继承时未指明父类的泛型类型" class="headerlink" title="5.2.2 继承时未指明父类的泛型类型"></a>5.2.2 继承时未指明父类的泛型类型</h4><p>如果子类继承泛型父类，但是并没有指定泛型类型，那么子类依然是泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubPair</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    ...<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p><strong>在泛型类中</strong>，不能定义带有泛型的静态方法，因为静态方法的创建早于对象的创建，而指定泛型需要在创建对象的时候才能指定</p><p>不是泛型类的类中可以创建带有泛型的静态方法</p></blockquote><h3 id="5-3-泛型擦除"><a href="#5-3-泛型擦除" class="headerlink" title="5.3 泛型擦除"></a>5.3 泛型擦除</h3><p><strong>泛型擦除</strong>是指Java中的泛型只在编译期有效，在运行期间会被删除。也就是说所有泛型参数在编译后都会被清除掉。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">listMethod</span>(<span class="hljs-params">List&lt;<span class="hljs-built_in">String</span>&gt; stringList</span>) &#123;  <br>    &#125;  <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">listMethod</span>(<span class="hljs-params">List&lt;Integer&gt; intList</span>) &#123;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>上面这段代码编译时会报方法重载错误，原因是上面两个方法的参数是泛型参数，在编译后会被泛型擦除，最后两个方法都会是 <code>public void listMethod(List intList)</code>，所以会报重载错误的。</p><p>在编译器编译后，泛型的转换规则如下：</p><ul><li>List、List 擦除后的类型为 List；</li><li>List[]、List[] 擦除后的类型为 List[]；</li><li>List&lt;? extends E&gt;、List&lt;? super E&gt; 擦除后的类型为 List；</li><li>List&lt;T extends Serialzable &amp; Cloneable&gt; 擦除后类型为 List。</li></ul><p>有了上面的泛型擦除知识后，我们就可以理解下面的现象了：</p><ul><li>泛型类的class对象相同</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;  <br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">String</span>&gt;();  <br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; li = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Integer</span>&gt;();  <br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(ls.<span class="hljs-title function_">getClass</span>() == li.<span class="hljs-title function_">getClass</span>());  <br>&#125;  <br></code></pre></td></tr></table></figure><ul><li>不能对泛型数组进行初始化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt;[] list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt;[];   <span class="hljs-comment">// XXX</span><br></code></pre></td></tr></table></figure><h3 id="5-4-泛型方法"><a href="#5-4-泛型方法" class="headerlink" title="5.4 泛型方法"></a>5.4 泛型方法</h3><h4 id="5-4-1-创建泛型方法"><a href="#5-4-1-创建泛型方法" class="headerlink" title="5.4.1 创建泛型方法"></a>5.4.1 创建泛型方法</h4><p><strong>类型变量（T）需要放在修饰符的后面，并在返回类型的前面</strong>，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayAlg</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getMiddle</span><span class="hljs-params">(T... a)</span> &#123;<br>        <span class="hljs-keyword">return</span> a[a.length / <span class="hljs-number">2</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-2-类型变量的限定"><a href="#5-4-2-类型变量的限定" class="headerlink" title="5.4.2 类型变量的限定"></a>5.4.2 类型变量的限定</h4><p>如果要计算数组中的元素，可以这样编写方法代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayAlg</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">min</span><span class="hljs-params">(T[] a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span> || a.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">T</span> <span class="hljs-variable">smallest</span> <span class="hljs-operator">=</span> a[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; a.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (smallest.compareTo(a[i]) &gt; <span class="hljs-number">0</span>) &#123;<br>                smallest = a[i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> smallest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但这样会报错，因为使用compareTo方法的对象必须实现了Comparable接口，故这里必须对类型变量T做出限定，方法体变成了如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&gt; T <span class="hljs-title function_">min</span><span class="hljs-params">(T[] a)</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样规定了方法min只能在实现了Comparable接口的类的数组上调用</p><p>如果要加多个限定，可以用<code>&amp;</code>分隔符分隔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span> &amp; Serializable<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>这里使用extends关键字，不是implements关键字</p></blockquote><h3 id="5-5-通配符类型"><a href="#5-5-通配符类型" class="headerlink" title="5.5 通配符类型"></a>5.5 通配符类型</h3><h4 id="5-5-1-上界通配符（通配符的子类型限定）"><a href="#5-5-1-上界通配符（通配符的子类型限定）" class="headerlink" title="5.5.1 上界通配符（通配符的子类型限定）"></a>5.5.1 上界通配符（通配符的子类型限定）</h4><p>在泛型类型中，不管S和T有什么样的关系，泛型Pair&lt;S&gt;和Pair&lt;T&gt;都没有任何关系</p><p>在通配符类型中，可以允许类型参数发生变化，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&gt;<br></code></pre></td></tr></table></figure><p>表示任何任何类型参数是Employee子类和Employee类型的泛型类型，例如<code>Pair&lt;Manager&gt;</code>符合，但是<code>Pair&lt;String&gt;</code>不是，因为String不是Employee的子类</p><p>此时<code>Pair&lt;Manager&gt;</code>是<code>Pair&lt;? extends Employee&gt;</code></p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericsUpperBoundedWildcardDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sumOfList</span><span class="hljs-params">(List&lt;? extends Number&gt; list)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (Number n : list) &#123;<br>            s += n.doubleValue();<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; li = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sumOfList(li));<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// sum = 6.0</span><br></code></pre></td></tr></table></figure><h4 id="5-5-2-下界通配符（通配符的超类型限定）"><a href="#5-5-2-下界通配符（通配符的超类型限定）" class="headerlink" title="5.5.2 下界通配符（通配符的超类型限定）"></a>5.5.2 下界通配符（通配符的超类型限定）</h4><p>在通配符限定中可以指定一个超类型限定（supertype bound），例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;? <span class="hljs-built_in">super</span> Manager&gt;<br></code></pre></td></tr></table></figure><p>表示所有Manager的超类型（父类型）以及Manager类型，例如<code>Pair&lt;Employee&gt;</code>符合（Employee是Manager的父类）</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericsLowerBoundedWildcardDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNumbers</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> Integer&gt; list)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        addNumbers(list);<br>        System.out.println(Arrays.deepToString(list.toArray()));<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="5-5-3-无界通配符"><a href="#5-5-3-无界通配符" class="headerlink" title="5.5.3 无界通配符"></a>5.5.3 无界通配符</h4><p>无界通配符有两种应用场景：</p><ul><li>可以使用 Object 类中提供的功能来实现的方法。</li><li>使用不依赖于类型参数的泛型类中的方法。</li></ul><p>语法形式：<code>&lt;?&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericsUnboundedWildcardDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(List&lt;?&gt; list)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object elem : list) &#123;<br>            System.out.print(elem + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; li = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        List&lt;String&gt; ls = Arrays.asList(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>);<br>        printList(li);<br>        printList(ls);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// 1 2 3</span><br><span class="hljs-comment">// one two three</span><br></code></pre></td></tr></table></figure><p>如果在集合中用<code>?</code>来创建集合，那么即使将一个例如String类型的集合引用赋值给它，它**不能集合中添加任何值，除了<code>null</code>**，但是可以读取数据，获得的数据类型为Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; list = <span class="hljs-literal">null</span>;<br><br>List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list2.add(<span class="hljs-string">&quot;A&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;B&quot;</span>);<br><br>list = list2;<br>list.add(<span class="hljs-string">&quot;B&quot;</span>); <span class="hljs-comment">// 报错</span><br>list.add(<span class="hljs-literal">null</span>);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h2 id="六、集合"><a href="#六、集合" class="headerlink" title="六、集合"></a>六、集合</h2><h3 id="6-1-动态数组选择"><a href="#6-1-动态数组选择" class="headerlink" title="6.1 动态数组选择"></a>6.1 动态数组选择</h3><p>动态数组可以选择ArrayList和Vector两种，其中Vector是<strong>同步的</strong>，可以安全的从两个线程访问同一个Vector对象。</p><p>但是，如果只从一个线程访问Vector，代码就会在同步操作上白白浪费大量的时间；ArrayList与之相反，它的方法是不同步的，因此在不需要同步时使用ArrayList，而不要使用Vector</p><h3 id="6-2-Map键值获取"><a href="#6-2-Map键值获取" class="headerlink" title="6.2 Map键值获取"></a>6.2 Map键值获取</h3><ul><li><p>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</p><ul><li>返回Map.Entry对象，其中包含了Map中的键值对的集合视图</li></ul></li><li><p>Set&lt;K&gt; keySet()</p><ul><li>返回映射中所有键的一个集合视图</li></ul></li><li><p>Collection&lt;V&gt; values()</p><ul><li>返回映射中所有值的一个集合视图</li></ul></li></ul><h2 id="七、IO流"><a href="#七、IO流" class="headerlink" title="七、IO流"></a>七、IO流</h2><h3 id="7-1-File类概述"><a href="#7-1-File类概述" class="headerlink" title="7.1 File类概述"></a>7.1 File类概述</h3><p>File类是java.io包下的类</p><p>File类的一个对象，代表一个文件或者一个文件目录</p><h3 id="7-2-File类构造方法"><a href="#7-2-File类构造方法" class="headerlink" title="7.2 File类构造方法"></a>7.2 File类构造方法</h3><table><thead><tr><th align="center">Constructor</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><code>File(File parent, String child)</code></td><td align="left">Creates a new <code>File</code> instance from a parent abstract pathname and a child pathname string.</td></tr><tr><td align="center"><code>File(String pathname)</code></td><td align="left">Creates a new <code>File</code> instance by converting the given pathname string into an abstract pathname.</td></tr><tr><td align="center"><code>File(String parent, String child)</code></td><td align="left">Creates a new <code>File</code> instance from a parent pathname string and a child pathname string.</td></tr><tr><td align="center"><code>File(URI uri)</code></td><td align="left">Creates a new <code>File</code> instance by converting the given <code>file:</code> URI into an abstract pathname.</td></tr></tbody></table><blockquote><p>注：其中<code>File(String pathname)</code>中<code>pathname</code>使用相对路径，是相对于当前module的位置，不是当前类所在的位置</p></blockquote><p>路径分隔符：</p><ul><li>windows和DOS系统下默认使用<code>\</code>来表示</li><li>UNIX和URL使用<code>/</code>表示</li></ul><p>为了解决在不同系统下分隔符不同，File类提供了一个常量根据系统动态的提供分隔符<code>public static final String separator</code>，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\ecifics\\hello.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:&quot;</span> + File.separator + <span class="hljs-string">&quot;ecifics&quot;</span> + File.separator + <span class="hljs-string">&quot;hello.text&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="7-3-File类的常用方法"><a href="#7-3-File类的常用方法" class="headerlink" title="7.3 File类的常用方法"></a>7.3 File类的常用方法</h3><table><thead><tr><th align="center">Modifier And Type</th><th align="center">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><code>String</code></td><td align="center"><code>getAbsolutePath()</code></td><td align="left">Returns the absolute pathname string of this abstract pathname.</td></tr><tr><td align="center"><code>String</code></td><td align="center"><code>getName()</code></td><td align="left">Returns the name of the file or directory denoted by this abstract pathname.</td></tr><tr><td align="center"><code>String</code></td><td align="center"><code>getPath()</code></td><td align="left">Converts this abstract pathname into a pathname string.</td></tr><tr><td align="center"><code>String</code></td><td align="center"><code>getParent()</code></td><td align="left">Returns the pathname string of this abstract pathname’s parent, or null if this pathname does not name a parent directory.</td></tr><tr><td align="center"><code>long</code></td><td align="center"><code>length()</code></td><td align="left">Returns the length of the file denoted by this abstract pathname.</td></tr><tr><td align="center"><code>long</code></td><td align="center"><code>lastModified()</code></td><td align="left">Returns the time that the file denoted by this abstract pathname was last modified.</td></tr><tr><td align="center"><code>String[]</code></td><td align="center"><code>list()</code></td><td align="left">Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.</td></tr><tr><td align="center"><code>File[]</code></td><td align="center"><code>listFiles()</code></td><td align="left">Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;hello.text&quot;</span>);<br><br>    System.out.println(file.getAbsolutePath());<br>    System.out.println(file.getPath());<br>    System.out.println(file.getName());<br>    System.out.println(file.getParent());<br>    System.out.println(file.length());<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(file.lastModified()));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\Java\Project\JavaSE\file\hello.text<br>file\hello.text<br>hello.text<br>file<br><span class="hljs-number">7</span><br>Sun May <span class="hljs-number">01</span> 09:<span class="hljs-number">35</span>:<span class="hljs-number">44</span> CST <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure><h3 id="7-4-IO流概述"><a href="#7-4-IO流概述" class="headerlink" title="7.4 IO流概述"></a>7.4 IO流概述</h3><p>流是一种抽象概念，它代表了数据的无结构化传输。<code>IO</code> 流对应的就是 <code>InPut</code> 和 <code>Output</code>，也就是输入和输出。输入和输出这个概念是针对于应用程序而言，比如当前程序中需要读取文件中的内容，那么这就是输入，而如果需要将应用程序本身的数据发送到其他应用，就对应了输出。</p><h3 id="7-5-IO流的分类"><a href="#7-5-IO流的分类" class="headerlink" title="7.5 IO流的分类"></a>7.5 IO流的分类</h3><ul><li>按操作数据单位不同分为：字节流(8 bit，用于传输音视频)，字符流(16 bit，用于传输文本文件)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流（作用在已有的流之上，装饰者模式，例如缓冲流）</li></ul><p><img src="/./IO%E6%B5%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="IO流示意图"></p><table><thead><tr><th align="center">抽象基类</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><p><strong>流的体系结构</strong></p><p><img src="/IO%E6%B5%81%E4%BD%93%E7%B3%BB.png" alt="IO流体系"></p><p>从上图可以看出，字节流是以Stream为后缀的，而字符流是以Reader或者Writer为后缀的</p><h3 id="7-6-IO流使用步骤以及异常处理"><a href="#7-6-IO流使用步骤以及异常处理" class="headerlink" title="7.6 IO流使用步骤以及异常处理"></a>7.6 IO流使用步骤以及异常处理</h3><p>使用步骤</p><ul><li>File类的实例化</li><li>流的实例化</li><li>流的相关操作</li><li><strong>流的关闭</strong></li></ul><p>异常处理</p><ul><li><p>流使用完之后要用其<code>close()</code>方法对其进行关闭</p></li><li><p>要将流的实例化放在try-catch中，因为如果直接抛出异常，流无法关闭，因此需要将实例化以及相关操作放在try-catch中，而将流的关闭放在<code>finally</code>中，并且在关闭之前要检查要关闭的流是否为<code>null</code></p></li><li><p>读入的文件一定要存在，不然会报<code>FileNotFoundException</code></p></li><li><p>如果要关闭多了流，需要在使用多个try-catch语句，每个try-catch语句中关闭一个流</p></li></ul><h3 id="7-7-字符流-用于处理文本文件等字符类型数据"><a href="#7-7-字符流-用于处理文本文件等字符类型数据" class="headerlink" title="7.7 字符流-用于处理文本文件等字符类型数据"></a>7.7 字符流-用于处理文本文件等字符类型数据</h3><h4 id="7-7-1-读入数据-FileReader"><a href="#7-7-1-读入数据-FileReader" class="headerlink" title="7.7.1 读入数据-FileReader"></a>7.7.1 读入数据-FileReader</h4><p>使用<code>read()</code>读取工程目录下file目录下的hello.txt文件中的文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.实例化File类对象，指明要操作的文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.操作具体的流</span><br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><br>            <span class="hljs-comment">// 3. 数据的获取, Read()方法返回值：The character read, or -1 if the end of the stream has been reached</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> fileReader.read();<br><br>            <span class="hljs-keyword">while</span> (data != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print((<span class="hljs-type">char</span>) data);<br>                data = fileReader.read();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 4.流的关闭</span><br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                    fileReader.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>reader(char[] cbuf)</code>读取工程目录下file目录下的hello.txt文件中的文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileReaderOverride</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.实例化File类对象，指明要操作的文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.创建流</span><br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><br>            <span class="hljs-comment">// 3.流相关的操作</span><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = fileReader.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                    System.out.print(cbuf[i]);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 4.关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                    fileReader.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：read(char[] cbuf)实际上使用读取到的结果覆盖原来的cbuf数组，如果返回的结果长度小于了cbuf数组的长度，那么如果读取cbuf的全部数据，后面部分可能是之前的数据，故遍历cbuf 的数组长度不应该超过read(char[] cbuf)的返回值</p></blockquote><h4 id="7-7-2-输出数据-FileWriter"><a href="#7-7-2-输出数据-FileWriter" class="headerlink" title="7.7.2 输出数据-FileWriter"></a>7.7.2 输出数据-FileWriter</h4><p>向目标文件输出相关的字符</p><p>输出操作的目标文件对象，如果不存在，在输出的过程中会自动创建；如果存在，会用输出内容覆盖文本文件原来的内容</p><p>如果想在文件末尾添加输出的内容，可以在FileWriter构造方法<code>public FileWriter(File file, boolean append)</code>中将第二个参数位置设置为true(if true, then bytes will be written to the end of the file rather than the beginning)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.实例化File对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;writer.txt&quot;</span>);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.创建流的对象</span><br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>            <br>            <span class="hljs-comment">// 3.流的相关操作</span><br>            fileWriter.write(<span class="hljs-string">&quot;I have a dream!\n&quot;</span>);<br>            fileWriter.write(<span class="hljs-string">&quot;I also have a dream!&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 4.关闭流</span><br>                <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-literal">null</span>) &#123;<br>                    fileWriter.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-7-3-FileWriter和FileReader小练习"><a href="#7-7-3-FileWriter和FileReader小练习" class="headerlink" title="7.7.3 FileWriter和FileReader小练习"></a>7.7.3 FileWriter和FileReader小练习</h4><p>目标：将源文件中的文本信息写入到目标文件中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileReaderWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.创建File类实例化对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;hello2.txt&quot;</span>);<br><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.实例化流对象</span><br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFile);<br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(destFile);<br><br>            <span class="hljs-comment">// 3.流的相关操作，将目标文件中的文本写入对应的文件中去</span><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = fileReader.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                fileWriter.write(cbuf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                    fileReader.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-literal">null</span>) &#123;<br>                    fileWriter.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-8-字节流-用于处理音视频非文本文件等字节类型数据"><a href="#7-8-字节流-用于处理音视频非文本文件等字节类型数据" class="headerlink" title="7.8 字节流-用于处理音视频非文本文件等字节类型数据"></a>7.8 字节流-用于处理音视频非文本文件等字节类型数据</h3><p>使用FileInputStream和FileOutputStream实现图片文件的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputOutputStreamTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFileInputOutputStream</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.实例化File类的对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;image&quot;</span> + File.separator + <span class="hljs-string">&quot;1.jpg&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;image_copied&quot;</span> + File.separator + <span class="hljs-string">&quot;1_copy.jpg&quot;</span>);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.流的实例化</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFile);<br><br>            <span class="hljs-comment">// 3.流的相关操作</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                fos.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 4.关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                    fis.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>                    fis.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：如果使用字节流处理文本文件可能出现乱码问题</p></blockquote><h3 id="7-9-缓冲流"><a href="#7-9-缓冲流" class="headerlink" title="7.9 缓冲流"></a>7.9 缓冲流</h3><h4 id="7-9-1-缓冲流的作用"><a href="#7-9-1-缓冲流的作用" class="headerlink" title="7.9.1 缓冲流的作用"></a>7.9.1 缓冲流的作用</h4><p>缓冲流也叫高效流，是处理流的一种，即是作用在流（字节流或者字符流）上的流。其目的就是<strong>加快读取和写入数据的速度</strong>。</p><p>缓冲流本身并没有IO功能，只是在别的流上加上缓冲效果从而提高了效率。当对文件或其他目标频繁读写或操作效率低，效能差时。这时使用缓冲流能够更高效的读写信息。因为缓冲流先将数据缓存起来，然后一次性写入或读取出来。所以说，缓冲流还是很重要的，在IO操作时加上缓冲流提升性能。</p><h4 id="7-9-2-使用步骤"><a href="#7-9-2-使用步骤" class="headerlink" title="7.9.2 使用步骤"></a>7.9.2 使用步骤</h4><ul><li>先创建对应的字节流或者字符流</li><li>再创建对应的缓冲流来包装对应的字节流和字符流</li><li>关闭时，关闭外层流（也就是缓冲流）的时候，内层流（缓冲流包裹的字节流或者字符流）也会进行关闭，因此只需要关闭缓冲流即可</li></ul><h4 id="7-9-3-处理非文本文件"><a href="#7-9-3-处理非文本文件" class="headerlink" title="7.9.3 处理非文本文件"></a>7.9.3 处理非文本文件</h4><p>将源文件复制到了目标文件，加了缓冲流之后读写速度大大提高了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBufferedStreamTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 创建File类实例对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;image&quot;</span> + File.separator + <span class="hljs-string">&quot;2.jpg&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;image_copied&quot;</span> + File.separator + <span class="hljs-string">&quot;2_copy.jpg&quot;</span>);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.1 实例化节点流对象</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFile);<br><br>            <span class="hljs-comment">// 2.2 实例化缓冲流对象</span><br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>            bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><br>            <span class="hljs-comment">// 3. 流的操作</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = bis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bis != <span class="hljs-literal">null</span>) &#123;<br>                    bis.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bos != <span class="hljs-literal">null</span>) &#123;<br>                    bos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-9-4-处理文本文件"><a href="#7-9-4-处理文本文件" class="headerlink" title="7.9.4 处理文本文件"></a>7.9.4 处理文本文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedTest</span> &#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBufferedReaderWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news_copy.txt&quot;</span>);<br>        <br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFile);<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(destFile);<br><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">10</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = br.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                bw.write(cbuf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>) &#123;<br>                    br.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bw != <span class="hljs-literal">null</span>) &#123;<br>                    bw.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取数据也可以用readLine方法进行读取，读取到文件末尾后会返回null，但是这样读取的文本是没有换行的，在写入目标文件中可以手动在每行后面加上”\n”，也可以在writer()方法后，调用缓冲流的newLine()方法进行换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBufferedReaderWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news_copy.txt&quot;</span>);<br><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFile);<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(destFile);<br><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br><br>            String data;<br>            <span class="hljs-keyword">while</span> ((data = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                bw.write(data);<br>                bw.newLine();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>) &#123;<br>                    br.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bw != <span class="hljs-literal">null</span>) &#123;<br>                    bw.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-10-转换流-提供了字节流和字符流之间的转换"><a href="#7-10-转换流-提供了字节流和字符流之间的转换" class="headerlink" title="7.10 转换流-提供了字节流和字符流之间的转换"></a>7.10 转换流-提供了字节流和字符流之间的转换</h3><p>转换流有<code>InputStreamReader</code>和<code>OutputStreamWriter</code>两种</p><p><img src="/%E8%BD%AC%E6%8D%A2%E6%B5%81.jpg"></p><h4 id="7-10-1-InputStreamReader"><a href="#7-10-1-InputStreamReader" class="headerlink" title="7.10.1 InputStreamReader"></a>7.10.1 InputStreamReader</h4><p>将txt文件中的内容以字节流的形式读取，然后用相应的字符流来输出到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputOutputStreamReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInputStreamReader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news.txt&quot;</span>);<br>            isr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis, StandardCharsets.UTF_8);<br><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">20</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = isr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cbuf, <span class="hljs-number">0</span>, len);<br>                System.out.print(s);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (isr != <span class="hljs-literal">null</span>) &#123;<br>                    isr.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：此时也只需要关闭外层的流，不需要单独关闭内层的流</p></blockquote><h4 id="7-10-2-OutputStreamWriter"><a href="#7-10-2-OutputStreamWriter" class="headerlink" title="7.10.2 OutputStreamWriter"></a>7.10.2 OutputStreamWriter</h4><p>将目标文件中的格式通过转换以gbk字符集的格式输出到另一个文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputOutputStreamReaderWriterTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOutputStreamWriter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;news_gbk.txt&quot;</span>);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>            isr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis, StandardCharsets.UTF_8);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(destFile);<br>            osw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(fos, <span class="hljs-string">&quot;gbk&quot;</span>);<br><br>            <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">20</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = isr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                osw.write(cbuf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (isr != <span class="hljs-literal">null</span>) &#123;<br>                    isr.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (osw != <span class="hljs-literal">null</span>) &#123;<br>                    osw.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-11-标准输入输出流"><a href="#7-11-标准输入输出流" class="headerlink" title="7.11 标准输入输出流"></a>7.11 标准输入输出流</h3><p><code>System.in</code>：标准的输入流，默认从键盘输入，可以通过<code>setIn(InputStream is)</code>来指定输入的位置</p><p><code>System.out</code>：默认的输出流，默认从控制台输出，可以通过<code>setOut(PrintStream ps)</code>来指定输出的位置</p><h3 id="7-12-对象流"><a href="#7-12-对象流" class="headerlink" title="7.12 对象流"></a>7.12 对象流</h3><h4 id="7-12-1-概述"><a href="#7-12-1-概述" class="headerlink" title="7.12.1 概述"></a>7.12.1 概述</h4><p>对象流有<code>ObjectInputStream</code>和<code>ObjectOutputStream</code>两种</p><p>对象流用于存储和读取<strong>基本数据类型</strong>数据或者<strong>对象</strong>的处理流。它可以把Java中的对象从内存当中写入数据源（文件）中，也能把对象从数据源中还原回来</p><p><strong>序列化</strong>：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。可以用于前后端传输数据</p><p><strong>反序列化</strong>：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象</p><p><strong>只有实现类Serializable或而Externalizable接口的对象才可以序列化</strong></p><h4 id="7-12-2-对象流示例"><a href="#7-12-2-对象流示例" class="headerlink" title="7.12.2 对象流示例"></a>7.12.2 对象流示例</h4><p>将字符串对象写入文件中，在从文件中读取到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputOutputStreamTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将java对象保存到磁盘或者通过网络传输出去</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;object.txt&quot;</span>));<br><br>            oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Ecifics&quot;</span>));<br>            oos.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (oos != <span class="hljs-literal">null</span>) &#123;<br>                    oos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 从文件中读取java对象</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testObjectInputStream</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;object.txt&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(destFile));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) ois.readObject();<br>            System.out.println(str);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (ois != <span class="hljs-literal">null</span>) &#123;<br>                    ois.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-12-3-序列化和反序列化自定义类"><a href="#7-12-3-序列化和反序列化自定义类" class="headerlink" title="7.12.3 序列化和反序列化自定义类"></a>7.12.3 序列化和反序列化自定义类</h4><p>自定义类支持序列化，必须实现下列两个接口之一，并且要提供一个全局常量序列版本号，例如<code>public static final long serialVersionUID = 4234244234L;</code>，<strong>除此之外，必须保证对象内部所有的属性也必须是可以序列化的（默认情况下，基本数据类型可以序列化）</strong></p><ul><li>Serializable</li><li>Externalizable</li></ul><p><code>serialVersionUID</code>用来表明类的不同版本间的兼容性</p><ul><li>在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。 </li><li>当你序列化了一个类实例后，希望更改一个字段或添加一个字段，不设置serialVersionUID，那么jdk自动生成的serialVersionUID就变了，反序列化的时候，会找不到对应的序列化对象，并在反序列化时抛出一个异常。如果你添加了serialVersionUID，在反序列旧有实例时，新添加或更改的字段值将设为初始化值（对象为null，基本类型为相应的初始默认值），字段被删除将不设置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputOutputStreamTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将java对象保存到磁盘或者通过网络传输出去</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;object.txt&quot;</span>));<br><br>            oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Ecifics&quot;</span>, <span class="hljs-number">23</span>));<br>            oos.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (oos != <span class="hljs-literal">null</span>) &#123;<br>                    oos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testObjectInputStream</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file&quot;</span> + File.separator + <span class="hljs-string">&quot;object.txt&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(destFile));<br><br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) ois.readObject();<br>            System.out.println(person);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (ois != <span class="hljs-literal">null</span>) &#123;<br>                    ois.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：<br>ObjectInputStream和ObjectOutputStream不能序列化static和transient（在类实现序列化接口，而类下某个变量不想被序列化的情况下，用transient修饰该变量，可避免该变量被序列化）修饰的成员变量，被这两个修饰符修饰的成员变量在序列化过程中会被忽略</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记.md</title>
    <link href="/2024/06/10/Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/06/10/Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-学习笔记"><a href="#Linux-学习笔记" class="headerlink" title="Linux 学习笔记"></a>Linux 学习笔记</h1><h2 id="一、包管理工具"><a href="#一、包管理工具" class="headerlink" title="一、包管理工具"></a>一、包管理工具</h2><h3 id="1-1-参考资料"><a href="#1-1-参考资料" class="headerlink" title="1.1 参考资料"></a>1.1 参考资料</h3><ul><li><a href="https://ubuntu.com/server/docs/package-management">Ubuntu Server Package management</a></li></ul><h3 id="1-2-apt-Advanced-Packaging-Tool"><a href="#1-2-apt-Advanced-Packaging-Tool" class="headerlink" title="1.2 apt (Advanced Packaging Tool)"></a>1.2 apt (Advanced Packaging Tool)</h3><p><a href="https://www.reddit.com/r/linux4noobs/comments/zftf5d/sudo_apt_update_sudo_apt_grade_explanation_im/">apt update &amp; apt upgrade</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux必装软件.md</title>
    <link href="/2024/01/01/Linux%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <url>/2024/01/01/Linux%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-必装软件"><a href="#Linux-必装软件" class="headerlink" title="Linux 必装软件"></a>Linux 必装软件</h1><h2 id="1-neofetch"><a href="#1-neofetch" class="headerlink" title="1. neofetch"></a>1. neofetch</h2><p><a href="https://github.com/dylanaraps/neofetch">neofetch</a>:displays information about your operating system, software and hardware in an aesthetic and visually pleasing way.</p><h2 id="2-tldr"><a href="#2-tldr" class="headerlink" title="2. tldr"></a>2. tldr</h2><p><a href="%5Btldr%5D(https://github.com/tldr-pages/tldr)">tldr</a>:The <strong>tldr-pages</strong> project is a collection of community-maintained help pages for command-line tools, that aims to be a simpler, more approachable complement to traditional <a href="https://en.wikipedia.org/wiki/Man_page">man pages</a>.</p><h2 id="3-oh-my-zsh"><a href="#3-oh-my-zsh" class="headerlink" title="3. oh my zsh"></a>3. oh my zsh</h2><blockquote><p>需要先安装zsh：<code>apt install zsh</code></p></blockquote><p><a href="https://ohmyz.sh/">oh my zsh</a>:Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git.md</title>
    <link href="/2024/01/01/Git/"/>
    <url>/2024/01/01/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="一、Git概述"><a href="#一、Git概述" class="headerlink" title="一、Git概述"></a>一、Git概述</h2><h3 id="1-1-Git三种状态"><a href="#1-1-Git三种状态" class="headerlink" title="1.1 Git三种状态"></a>1.1 Git三种状态</h3><ul><li>已提交（committed）：Modified means that you have changed the file but have not committed it to your database yet.</li><li>已修改（modified）：Staged means that you have marked a modified file in its current version to go into your next commit snapshot.</li><li>已暂存（staged）：Committed means that the data is safely stored in your local database.</li></ul><h3 id="1-2-Git三个阶段"><a href="#1-2-Git三个阶段" class="headerlink" title="1.2 Git三个阶段"></a>1.2 Git三个阶段</h3><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/three%20states%20of%20git.png" align="left" alt="three states of git"><ul><li>工作区（Working Tree）：The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.</li><li>暂存区（Staging Area &#x2F; Index）：The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.</li><li>Git目录（Git Directory）：The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you <em>clone</em> a repository from another computer.</li></ul><h3 id="1-3-Workflow-Of-Git"><a href="#1-3-Workflow-Of-Git" class="headerlink" title="1.3 Workflow Of Git"></a>1.3 Workflow Of Git</h3><p>The basic Git workflow goes something like this:</p><ul><li>You modify files in your working tree.</li><li>You selectively stage just those changes you want to be part of your next commit, which adds <em>only</em> those changes to the staging area.</li><li>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</li></ul><h3 id="1-4-用户信息"><a href="#1-4-用户信息" class="headerlink" title="1.4 用户信息"></a>1.4 用户信息</h3><p>The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.email johndoe@example.com</span><br></code></pre></td></tr></table></figure><blockquote><p>NOTICE:<strong>You need to do this only once if you pass the <code>--global</code> option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or email address for specific projects, you can run the command without the <code>--global</code> option when you’re in that project.</strong></p></blockquote><h3 id="1-5-Checking-Your-Settings"><a href="#1-5-Checking-Your-Settings" class="headerlink" title="1.5 Checking Your Settings"></a>1.5 Checking Your Settings</h3><p>If you want to check your configuration settings, you can use the <code>git config --list</code> command to list all the settings Git can find at that point:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --list</span><br>user.name=John Doe<br>user.email=johndoe@example.com<br>color.status=auto<br>color.branch=auto<br>color.interactive=auto<br>color.diff=auto<br>...<br></code></pre></td></tr></table></figure><h2 id="二、-Git-Bacis"><a href="#二、-Git-Bacis" class="headerlink" title="二、 Git Bacis"></a>二、 Git Bacis</h2><h3 id="2-1-Initializing-a-Repository-in-an-Existing-Directory"><a href="#2-1-Initializing-a-Repository-in-an-Existing-Directory" class="headerlink" title="2.1 Initializing a Repository in an Existing Directory"></a>2.1 Initializing a Repository in an Existing Directory</h3><p>If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory. Then type:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init</span><br></code></pre></td></tr></table></figure><p>If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit. You can accomplish that with a few <code>git add</code> commands that specify the files you want to track, followed by a <code>git commit</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add *.c</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add LICENSE</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&#x27;Initial project version&#x27;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-2-Recording-Changes-to-the-Repository"><a href="#2-2-Recording-Changes-to-the-Repository" class="headerlink" title="2.2 Recording Changes to the Repository"></a>2.2 Recording Changes to the Repository</h3><h4 id="Checking-the-Status-of-Your-Files"><a href="#Checking-the-Status-of-Your-Files" class="headerlink" title="Checking the Status of Your Files"></a>Checking the Status of Your Files</h4><p>The main tool you use to determine which files are in which state is the <code>git status</code> command. </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br></code></pre></td></tr></table></figure><h4 id="The-lifecycle-of-the-status-of-your-files"><a href="#The-lifecycle-of-the-status-of-your-files" class="headerlink" title="The lifecycle of the status of your files"></a>The lifecycle of the status of your files</h4><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/lifecycle%20of%20files.png" align="left" alt="lifecycle of files"><h3 id="2-3-Ignoring-Files"><a href="#2-3-Ignoring-Files" class="headerlink" title="2.3 Ignoring Files"></a>2.3 Ignoring Files</h3><p>The rules for the patterns you can put in the <code>.gitignore</code> file are as follows:</p><ul><li>Blank lines or lines starting with <code>#</code> are ignored.</li><li>Standard glob patterns work, and will be applied recursively throughout the entire working tree.</li><li>You can start patterns with a forward slash (<code>/</code>) to avoid recursivity.</li><li>You can end patterns with a forward slash (<code>/</code>) to specify a directory.</li><li>You can negate a pattern by starting it with an exclamation point (<code>!</code>).</li></ul><p>Glob patterns are like simplified regular expressions that shells use. An asterisk (<code>*</code>) matches zero or more characters; <code>[abc]</code> matches any character inside the brackets (in this case a, b, or c); a question mark (<code>?</code>) matches a single character; and brackets enclosing characters separated by a hyphen (<code>[0-9]</code>) matches any character between them (in this case 0 through 9). You can also use two asterisks to match nested directories; <code>a/**/z</code> would match <code>a/z</code>, <code>a/b/z</code>, <code>a/b/c/z</code>, and so on.</p><p>Here is another example <code>.gitignore</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs .gitignore"># ignore all .a files<br>*.a<br><br># but do track lib.a, even though you&#x27;re ignoring .a files above<br>!lib.a<br><br># only ignore the TODO file in the current directory, not subdir/TODO<br>/TODO<br><br># ignore all files in any directory named build<br>build/<br><br># ignore doc/notes.txt, but not doc/server/arch.txt<br>doc/*.txt<br><br># ignore all .pdf files in the doc/ directory and any of its subdirectories<br>doc/**/*.pdf<br></code></pre></td></tr></table></figure><h3 id="2-4-Removing-Files"><a href="#2-4-Removing-Files" class="headerlink" title="2.4 Removing Files"></a>2.4 Removing Files</h3><p>To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The <code>git rm</code> command does that, and also removes the file from your working directory so you don’t see it as an untracked file the next time around.</p><p>The primary function of <code>git rm</code> is to remove tracked files from the Git index. Additionally, <code>git rm</code> can be used to remove files from both the staging index and the working directory.</p><p>Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. This is particularly useful if you forgot to add something to your <code>.gitignore</code> file and accidentally staged it, like a large log file or a bunch of <code>.a</code> compiled files. To do this, use the <code>--cached</code> option:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">git rm --cached README<br></code></pre></td></tr></table></figure><h3 id="2-5-Viewing-Your-Staged-and-Unstaged-Changes"><a href="#2-5-Viewing-Your-Staged-and-Unstaged-Changes" class="headerlink" title="2.5 Viewing Your Staged and Unstaged Changes"></a>2.5 Viewing Your Staged and Unstaged Changes</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff</span><br></code></pre></td></tr></table></figure><p>Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, changes resulting from a merge, changes between two blob objects, or changes between two files on disk.</p><p>The following examples will be executed in a simple repo. The repo is created with the commands below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$:&gt; <span class="hljs-built_in">mkdir</span> diff_test_repo<br>$:&gt; <span class="hljs-built_in">cd</span> diff_test_repo<br>$:&gt; <span class="hljs-built_in">touch</span> diff_test.txt<br>$:&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is a git diff test example&quot;</span> &gt; diff_test.txt<br>$:&gt; git init .<br>Initialized empty Git repository <span class="hljs-keyword">in</span> /Users/kev/code/test/.git/<br>$:&gt; git add diff_test.txt<br>$:&gt; git commit -am<span class="hljs-string">&quot;add diff test file&quot;</span><br>[main (root-commit) 6f77fc3] add diff <span class="hljs-built_in">test</span> file<br>1 file changed, 1 insertion(+)<br>create mode 100644 diff_test.txt<br></code></pre></td></tr></table></figure><p>we execute <code>git diff</code> at this point, there will be no output. This is expected behavior as there are no changes in the repo to diff. Once the repo is created and we’ve added the <code>diff_test.txt</code> file, we can change the contents of the file to start experimenting with diff output.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$:&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is a diff example&quot;</span> &gt; diff_test.txt<br></code></pre></td></tr></table></figure><p>Executing this command will change the content of the <code>diff_test.txt</code> file. Once modified, we can view a diff and analyze the output. Now executing <code>git diff</code> will produce the following output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">diff --git a/diff_test.txt b/diff_test.txt<br>index 6b0c6cf..b37e70a 100644<br>--- a/diff_test.txt<br>+++ b/diff_test.txt<br>@@ -1 +1 @@<br>-this is a git diff <span class="hljs-built_in">test</span> example<br>+this is a diff example<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">@@ -<span class="hljs-number">1</span> +<span class="hljs-number">1</span> @@<br>-<span class="hljs-variable language_">this</span> is a git diff test example<br>+<span class="hljs-variable language_">this</span> is a diff example<br></code></pre></td></tr></table></figure><p>The first line is the chunk header. Each chunk is prepended by a header inclosed within <code>@@</code> symbols. The content of the header is a summary of changes made to the file. In our simplified example, we have -1 +1 meaning line one had changes. In a more realistic diff, you would see a header like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">@@ -34,6 +34,8 @@<br></code></pre></td></tr></table></figure><p>In this header example, 6 lines have been extracted starting from line number 34. Additionally, 8 lines have been added starting at line number 34.</p><h3 id="2-6-Viewing-the-Commit-History"><a href="#2-6-Viewing-the-Commit-History" class="headerlink" title="2.6 Viewing the Commit History"></a>2.6 Viewing the Commit History</h3><p>After you have created several commits, or if you have cloned a repository with an existing commit history, you’ll probably want to look back to see what has happened. The most basic and powerful tool to do this is the <code>git log</code> command.</p><p>When you run <code>git log</code> in this project, you should get output that looks something like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span></span><br>commit ca82a6dff817ec66f44342007202690a93763949<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Mon Mar 17 21:52:11 2008 -0700<br><br>    Change version number<br><br>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Sat Mar 15 16:40:33 2008 -0700<br><br>    Remove unnecessary test<br><br>commit a11bef06a3f659402fe7563abf99ad00de2209e6<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Sat Mar 15 10:31:28 2008 -0700<br><br>    Initial commit<br></code></pre></td></tr></table></figure><p>By default, with no arguments, <code>git log</code> lists the commits made in that repository in reverse chronological order; that is, the most recent commits show up first. As you can see, this command lists each commit with its SHA-1 checksum, the author’s name and email, the date written, and the commit message.</p><blockquote><p><code>git log</code> doesn’t show <strong>all</strong> the branches all the time.</p><p>By default, <code>git log</code> will only show commit history below the branch you’ve checked out.</p><p>To show commit history for the desired branch you have to explicitly specify it: <code>git log testing</code>. To show all of the branches, add <code>--all</code> to your <code>git log</code> command.</p></blockquote><h4 id="Common-options-to-git-log"><a href="#Common-options-to-git-log" class="headerlink" title="Common options to git log"></a>Common options to <code>git log</code></h4><table><thead><tr><th align="left">Option</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>-p</code></td><td align="left">Show the patch introduced with each commit.</td></tr><tr><td align="left"><code>--stat</code></td><td align="left">Show statistics for files modified in each commit.</td></tr><tr><td align="left"><code>--shortstat</code></td><td align="left">Display only the changed&#x2F;insertions&#x2F;deletions line from the –stat command.</td></tr><tr><td align="left"><code>--name-only</code></td><td align="left">Show the list of files modified after the commit information.</td></tr><tr><td align="left"><code>--name-status</code></td><td align="left">Show the list of files affected with added&#x2F;modified&#x2F;deleted information as well.</td></tr><tr><td align="left"><code>--abbrev-commit</code></td><td align="left">Show only the first few characters of the SHA-1 checksum instead of all 40.</td></tr><tr><td align="left"><code>--relative-date</code></td><td align="left">Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.</td></tr><tr><td align="left"><code>--graph</code></td><td align="left">Display an ASCII graph of the branch and merge history beside the log output.</td></tr><tr><td align="left"><code>--pretty</code></td><td align="left">Show commits in an alternate format. Option values include oneline, short, full, fuller, and format (where you specify your own format).</td></tr><tr><td align="left"><code>--oneline</code></td><td align="left">Shorthand for <code>--pretty=oneline --abbrev-commit</code> used together.</td></tr></tbody></table><h4 id="Option-pretty"><a href="#Option-pretty" class="headerlink" title="Option --pretty"></a>Option <code>--pretty</code></h4><p>This option changes the log output to formats other than the default. A few prebuilt option values are available for you to use.</p><p>The most interesting option value is <code>format</code>, which allows you to specify your own log output format. This is especially useful when you’re generating output for machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span></span><br>ca82a6d - Scott Chacon, 6 years ago : Change version number<br>085bb3b - Scott Chacon, 6 years ago : Remove unnecessary test<br>a11bef0 - Scott Chacon, 6 years ago : Initial commit<br></code></pre></td></tr></table></figure><p><a href="https://git-scm.com/book/en/v2/ch00/pretty_format">Useful specifiers for <code>git log --pretty=format</code></a> lists some of the more useful specifiers that <code>format</code> takes.</p><table><thead><tr><th align="left">Specifier</th><th align="left">Description of Output</th></tr></thead><tbody><tr><td align="left"><code>%H</code></td><td align="left">Commit hash</td></tr><tr><td align="left"><code>%h</code></td><td align="left">Abbreviated commit hash</td></tr><tr><td align="left"><code>%T</code></td><td align="left">Tree hash</td></tr><tr><td align="left"><code>%t</code></td><td align="left">Abbreviated tree hash</td></tr><tr><td align="left"><code>%P</code></td><td align="left">Parent hashes</td></tr><tr><td align="left"><code>%p</code></td><td align="left">Abbreviated parent hashes</td></tr><tr><td align="left"><code>%an</code></td><td align="left">Author name</td></tr><tr><td align="left"><code>%ae</code></td><td align="left">Author email</td></tr><tr><td align="left"><code>%ad</code></td><td align="left">Author date (format respects the –date&#x3D;option)</td></tr><tr><td align="left"><code>%ar</code></td><td align="left">Author date, relative</td></tr><tr><td align="left"><code>%cn</code></td><td align="left">Committer name</td></tr><tr><td align="left"><code>%ce</code></td><td align="left">Committer email</td></tr><tr><td align="left"><code>%cd</code></td><td align="left">Committer date</td></tr><tr><td align="left"><code>%cr</code></td><td align="left">Committer date, relative</td></tr><tr><td align="left"><code>%s</code></td><td align="left">Subject</td></tr></tbody></table><p>The <code>format</code> option values are particularly useful with another <code>log</code> option called <code>--graph</code>. This option adds a nice little ASCII graph showing your branch and merge history:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h %s&quot;</span> --graph</span><br>* 2d3acf9 Ignore errors from SIGCHLD on trap<br>*  5e3ee11 Merge branch &#x27;master&#x27; of git://github.com/dustin/grit<br>|\<br>| * 420eac9 Add method for getting the current branch<br>* | 30e367c Timeout code and tests<br>* | 5a09431 Add timeout protection to grit<br>* | e1193f8 Support for heads with slashes in them<br>|/<br>* d6016bc Require time for xmlschema<br>*  11d191e Merge branch &#x27;defunkt&#x27; into local<br></code></pre></td></tr></table></figure><h4 id="Limiting-Log-Output"><a href="#Limiting-Log-Output" class="headerlink" title="Limiting Log Output"></a>Limiting Log Output</h4><p>In addition to output-formatting options, <code>git log</code> takes a number of useful limiting options; that is, options that let you show only a subset of commits. </p><p> In fact, you can do <code>-&lt;n&gt;</code>, where <code>n</code> is any integer to show the last <code>n</code> commits, such as</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ git log <span class="hljs-number">-2</span><br><span class="hljs-keyword">commit</span> f71a4a8c84482e41c64c7992f629f0937234cdf9 (HEAD <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> master)<br>Author: Ecifics <span class="hljs-operator">&lt;</span>ecifics<span class="hljs-variable">@gmail</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>:   Thu <span class="hljs-type">Dec</span> <span class="hljs-number">1</span> <span class="hljs-number">16</span>:<span class="hljs-number">22</span>:<span class="hljs-number">02</span> <span class="hljs-number">2022</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span><br><br>    <span class="hljs-keyword">add</span> diff_test.txt<br><br><span class="hljs-keyword">commit</span> a1ab6fd41350d9356a90d6b910ef9026b395e57e<br>Author: Ecifics <span class="hljs-operator">&lt;</span>ecifics<span class="hljs-variable">@gmail</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>:   Thu <span class="hljs-type">Dec</span> <span class="hljs-number">1</span> <span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">30</span> <span class="hljs-number">2022</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span><br><br>    <span class="hljs-keyword">delete</span> RM.md<br></code></pre></td></tr></table></figure><p><code>git log -2</code> shows the last 2 commits</p><h3 id="2-7-Undoing-Things"><a href="#2-7-Undoing-Things" class="headerlink" title="2.7 Undoing Things"></a>2.7 Undoing Things</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit --amend</span><br></code></pre></td></tr></table></figure><p>This command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message.</p><p>As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&#x27;Initial commit&#x27;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add forgotten_file</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit --amend</span><br></code></pre></td></tr></table></figure><p>You end up with a single commit — the second commit replaces the results of the first.</p><h4 id="Unstaging-a-Staged-File"><a href="#Unstaging-a-Staged-File" class="headerlink" title="Unstaging a Staged File"></a>Unstaging a Staged File</h4><p>For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type <code>git add *</code> and stage them both. How can you unstage one of the two? The <code>git status</code> command reminds you:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add *</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>    renamed:    README.md -&gt; README<br>    modified:   CONTRIBUTING.md<br></code></pre></td></tr></table></figure><p>Right below the “Changes to be committed” text, it says use <code>git reset HEAD &lt;file&gt;…</code> to unstage. So, let’s use that advice to unstage the <code>CONTRIBUTING.md</code> file:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset HEAD CONTRIBUTING.md</span><br>Unstaged changes after reset:<br>MCONTRIBUTING.md<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>    renamed:    README.md -&gt; README<br><br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>    modified:   CONTRIBUTING.md<br></code></pre></td></tr></table></figure><p>The command is a bit strange, but it works. The <code>CONTRIBUTING.md</code> file is modified but once again unstaged.</p><h4 id="Unmodifying-a-Modified-File"><a href="#Unmodifying-a-Modified-File" class="headerlink" title="Unmodifying a Modified File"></a>Unmodifying a Modified File</h4><p>What if you realize that you don’t want to keep your changes to the <code>CONTRIBUTING.md</code> file? How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)? Luckily, <code>git status</code> tells you how to do that, too. In the last example output, the unstaged area looks like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs console">Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)<br><br>    modified:   CONTRIBUTING.md<br></code></pre></td></tr></table></figure><p>It tells you pretty explicitly how to discard the changes you’ve made. Let’s do what it says:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -- CONTRIBUTING.md</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Changes to be committed:<br>  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)<br><br>    renamed:    README.md -&gt; README<br></code></pre></td></tr></table></figure><p>You can see that the changes have been reverted.</p><h3 id="2-8-Working-with-Remotes"><a href="#2-8-Working-with-Remotes" class="headerlink" title="2.8 Working with Remotes"></a>2.8 Working with Remotes</h3><h4 id="Showing-Your-Remotes"><a href="#Showing-Your-Remotes" class="headerlink" title="Showing Your Remotes"></a>Showing Your Remotes</h4><p>To see which remote servers you have configured, you can run the <code>git remote</code> command. It lists the shortnames of each remote handle you’ve specified.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote</span><br>origin<br></code></pre></td></tr></table></figure><p>You can also specify <code>-v</code>, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br>originhttps://github.com/schacon/ticgit (fetch)<br>originhttps://github.com/schacon/ticgit (push)<br></code></pre></td></tr></table></figure><h4 id="Adding-Remote-Repositories"><a href="#Adding-Remote-Repositories" class="headerlink" title="Adding Remote Repositories"></a>Adding Remote Repositories</h4><p> To add a new remote Git repository as a shortname you can reference easily, run <code>git remote add &lt;shortname&gt; &lt;url&gt;</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote</span><br>origin<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add pb https://github.com/paulboone/ticgit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br>originhttps://github.com/schacon/ticgit (fetch)<br>originhttps://github.com/schacon/ticgit (push)<br>pbhttps://github.com/paulboone/ticgit (fetch)<br>pbhttps://github.com/paulboone/ticgit (push)<br></code></pre></td></tr></table></figure><h4 id="Fetching-and-Pulling-from-Your-Remotes"><a href="#Fetching-and-Pulling-from-Your-Remotes" class="headerlink" title="Fetching and Pulling from Your Remotes"></a>Fetching and Pulling from Your Remotes</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git fetch &lt;remote&gt;</span><br></code></pre></td></tr></table></figure><p>The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.</p><p><strong>It’s important to note that the <code>git fetch</code> command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</strong></p><p><strong>Running <code>git pull</code> generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.</strong></p><h4 id="Pushing-to-Your-Remotes"><a href="#Pushing-to-Your-Remotes" class="headerlink" title="Pushing to Your Remotes"></a>Pushing to Your Remotes</h4><p>The command for this is simple: <code>git push &lt;remote&gt; &lt;branch&gt;</code>. If you want to push your <code>master</code> branch to your <code>origin</code> server, then you can run this to push any commits you’ve done back up to the server:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin master</span><br></code></pre></td></tr></table></figure><p>This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. You’ll have to fetch their work first and incorporate it into yours before you’ll be allowed to push. </p><h4 id="Inspecting-a-Remote"><a href="#Inspecting-a-Remote" class="headerlink" title="Inspecting a Remote"></a>Inspecting a Remote</h4><p>If you want to see more information about a particular remote, you can use the <code>git remote show &lt;remote&gt;</code> command. If you run this command with a particular shortname, such as <code>origin</code>, you get something like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote show origin</span><br>* remote origin<br>  Fetch URL: https://github.com/schacon/ticgit<br>  Push  URL: https://github.com/schacon/ticgit<br>  HEAD branch: master<br>  Remote branches:<br>    master                               tracked<br>    dev-branch                           tracked<br>  Local branch configured for &#x27;git pull&#x27;:<br>    master merges with remote master<br>  Local ref configured for &#x27;git push&#x27;:<br>    master pushes to master (up to date)<br></code></pre></td></tr></table></figure><p>It lists the URL for the remote repository as well as the tracking branch information. The command helpfully tells you that if you’re on the <code>master</code> branch and you run <code>git pull</code>, it will automatically merge the remote’s <code>master</code> branch into the local one after it has been fetched. It also lists all the remote references it has pulled down.</p><h4 id="Renaming-and-Removing-Remotes"><a href="#Renaming-and-Removing-Remotes" class="headerlink" title="Renaming and Removing Remotes"></a>Renaming and Removing Remotes</h4><p>You can run <code>git remote rename</code> to change a remote’s shortname. For instance, if you want to rename <code>pb</code> to <code>paul</code>, you can do so with <code>git remote rename</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote rename pb paul</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote</span><br>origin<br>paul<br></code></pre></td></tr></table></figure><p>It’s worth mentioning that this changes all your remote-tracking branch names, too. What used to be referenced at <code>pb/master</code> is now at <code>paul/master</code>.</p><p>If you want to remove a remote for some reason — you’ve moved the server or are no longer using a particular mirror, or perhaps a contributor isn’t contributing anymore — you can either use <code>git remote remove</code> or <code>git remote rm</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote remove paul</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote</span><br>origin<br></code></pre></td></tr></table></figure><p>Once you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted.</p><h3 id="2-9-Tagging"><a href="#2-9-Tagging" class="headerlink" title="2.9 Tagging"></a>2.9 Tagging</h3><p>Typically, people use this functionality to mark release points (<code>v1.0</code>, <code>v2.0</code> and so on).</p><h4 id="Listing-Your-Tags"><a href="#Listing-Your-Tags" class="headerlink" title="Listing Your Tags"></a>Listing Your Tags</h4><p>Listing the existing tags in Git is straightforward. Just type <code>git tag</code> (with optional <code>-l</code> or <code>--list</code>):</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag</span><br>v1.0<br>v2.0<br></code></pre></td></tr></table></figure><p>This command lists the tags in alphabetical order; the order in which they are displayed has no real importance.</p><p>You can also search for tags that match a particular pattern. The Git source repo, for instance, contains more than 500 tags. If you’re interested only in looking at the 1.8.5 series, you can run this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -l <span class="hljs-string">&quot;v1.8.5*&quot;</span></span><br>v1.8.5<br>v1.8.5-rc0<br>v1.8.5-rc1<br>v1.8.5-rc2<br>v1.8.5-rc3<br>v1.8.5.1<br>v1.8.5.2<br></code></pre></td></tr></table></figure><h4 id="Creating-Tags"><a href="#Creating-Tags" class="headerlink" title="Creating Tags"></a>Creating Tags</h4><p>Git supports two types of tags: <em>lightweight</em> and <em>annotated</em>.</p><p>A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.</p><p>Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too.</p><h4 id="Annotated-Tags"><a href="#Annotated-Tags" class="headerlink" title="Annotated Tags"></a>Annotated Tags</h4><p>Creating an annotated tag in Git is simple. The easiest way is to specify <code>-a</code> when you run the <code>tag</code> command:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -a v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag</span><br>v0.1<br>v1.3<br>v1.4<br></code></pre></td></tr></table></figure><p>The <code>-m</code> specifies a tagging message, which is stored with the tag. If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in.</p><p>You can see the tag data along with the commit that was tagged by using the <code>git show</code> command:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show v1.4</span><br>tag v1.4<br>Tagger: Ben Straub &lt;ben@straub.cc&gt;<br>Date:   Sat May 3 20:19:12 2014 -0700<br><br>my version 1.4<br><br>commit ca82a6dff817ec66f44342007202690a93763949<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Mon Mar 17 21:52:11 2008 -0700<br><br>    Change version number<br></code></pre></td></tr></table></figure><p>That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.</p><h4 id="Lightweight-Tags"><a href="#Lightweight-Tags" class="headerlink" title="Lightweight Tags"></a>Lightweight Tags</h4><p>Another way to tag commits is with a lightweight tag. This is basically the commit checksum stored in a file — no other information is kept. To create a lightweight tag, don’t supply any of the <code>-a</code>, <code>-s</code>, or <code>-m</code> options, just provide a tag name:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag v1.4-lw</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag</span><br>v0.1<br>v1.3<br>v1.4<br>v1.4-lw<br>v1.5<br></code></pre></td></tr></table></figure><p>This time, if you run <code>git show</code> on the tag, you don’t see the extra tag information. The command just shows the commit:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show v1.4-lw</span><br>commit ca82a6dff817ec66f44342007202690a93763949<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Mon Mar 17 21:52:11 2008 -0700<br><br>    Change version number<br></code></pre></td></tr></table></figure><h4 id="Tagging-Later"><a href="#Tagging-Later" class="headerlink" title="Tagging Later"></a>Tagging Later</h4><p>You can also tag commits after you’ve moved past them. Suppose your commit history looks like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --pretty=oneline</span><br>15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch &#x27;experiment&#x27;<br>a6b4c97498bd301d84096da251c98a07c7723e65 Create write support<br>0d52aaab4479697da7686c15f77a3d64d9165190 One more thing<br>6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch &#x27;experiment&#x27;<br>0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc Add commit function<br>4682c3261057305bdd616e23b64b0857d832627b Add todo file<br>166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support<br>9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile<br>964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo<br>8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme<br></code></pre></td></tr></table></figure><p>Now, suppose you forgot to tag the project at v1.2, which was at the “Update rakefile” commit. You can add it after the fact. To tag that commit, you specify the commit checksum (or part of it) at the end of the command:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -a v1.2 9fceb02</span><br></code></pre></td></tr></table></figure><p>You can see that you’ve tagged the commit:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag</span><br>v0.1<br>v1.2<br>v1.3<br>v1.4<br>v1.4-lw<br>v1.5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show v1.2</span><br>tag v1.2<br>Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Mon Feb 9 15:32:16 2009 -0800<br><br>version 1.2<br>commit 9fceb02d0ae598e95dc970b74767f19372d61af8<br>Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;<br>Date:   Sun Apr 27 20:43:35 2008 -0700<br><br>    Update rakefile<br>...<br></code></pre></td></tr></table></figure><h4 id="Sharing-Tags"><a href="#Sharing-Tags" class="headerlink" title="Sharing Tags"></a>Sharing Tags</h4><p>**By default, the <code>git push</code> command doesn’t transfer tags to remote servers. **You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches — you can run <code>git push origin &lt;tagname&gt;</code>.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin v1.5</span><br>Counting objects: 14, done.<br>Delta compression using up to 8 threads.<br>Compressing objects: 100% (12/12), done.<br>Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.<br>Total 14 (delta 3), reused 0 (delta 0)<br>To git@github.com:schacon/simplegit.git<br> * [new tag]         v1.5 -&gt; v1.5<br></code></pre></td></tr></table></figure><p>If you have a lot of tags that you want to push up at once, you can also use the <code>--tags</code> option to the <code>git push</code> command. This will transfer all of your tags to the remote server that are not already there.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --tags</span><br>Counting objects: 1, done.<br>Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.<br>Total 1 (delta 0), reused 0 (delta 0)<br>To git@github.com:schacon/simplegit.git<br> * [new tag]         v1.4 -&gt; v1.4<br> * [new tag]         v1.4-lw -&gt; v1.4-lw<br></code></pre></td></tr></table></figure><p>Now, when someone else clones or pulls from your repository, they will get all your tags as well.</p><blockquote><p>Note: <code>git push</code> pushes both types of tags</p><p><code>git push &lt;remote&gt; --tags</code> will push both lightweight and annotated tags. There is currently no option to push only lightweight tags, but if you use <code>git push &lt;remote&gt; --follow-tags</code> only annotated tags will be pushed to the remote.</p></blockquote><h4 id="Deleting-Tags"><a href="#Deleting-Tags" class="headerlink" title="Deleting Tags"></a>Deleting Tags</h4><p>To delete a tag on your local repository, you can use <code>git tag -d &lt;tagname&gt;</code>. For example, we could remove our lightweight tag above as follows:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -d v1.4-lw</span><br>Deleted tag &#x27;v1.4-lw&#x27; (was e7d5add)<br></code></pre></td></tr></table></figure><p>**Note that this does not remove the tag from any remote servers. **There are two common variations for deleting a tag from a remote server.</p><p>The first variation is <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/v1.4-lw</span><br>To /git@github.com:schacon/simplegit.git<br> - [deleted]         v1.4-lw<br></code></pre></td></tr></table></figure><p>The way to interpret the above is to read it as the null value before the colon is being pushed to the remote tag name, effectively deleting it.</p><p>The second (and more intuitive) way to delete a remote tag is with:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete &lt;tagname&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Checking-out-Tags"><a href="#Checking-out-Tags" class="headerlink" title="Checking out Tags"></a>Checking out Tags</h4><p>If you want to view the versions of files a tag is pointing to, you can do a <code>git checkout</code> of that tag, although this puts your repository in “detached HEAD” state, which has some ill side effects:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout v2.0.0</span><br>Note: switching to &#x27;v2.0.0&#x27;.<br><br>You are in &#x27;detached HEAD&#x27; state. You can look around, make experimental<br>changes and commit them, and you can discard any commits you make in this<br>state without impacting any branches by performing another checkout.<br><br>If you want to create a new branch to retain commits you create, you may<br>do so (now or later) by using -c with the switch command. Example:<br><br>  git switch -c &lt;new-branch-name&gt;<br><br>Or undo this operation with:<br><br>  git switch -<br><br>Turn off this advice by setting config variable advice.detachedHead to false<br><br>HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout v2.0-beta-0.1</span><br>Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final<br>HEAD is now at df3f601... Add atlas.json and cover image<br></code></pre></td></tr></table></figure><p>**In “detached HEAD” state, if you make changes and then create a commit, the tag will stay the same, but your new commit won’t belong to any branch and will be unreachable, except by the exact commit hash. **Thus, if you need to make changes — say you’re fixing a bug on an older version, for instance — you will generally want to create a branch:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b version2 v2.0.0</span><br>Switched to a new branch &#x27;version2&#x27;<br></code></pre></td></tr></table></figure><p>If you do this and make a commit, your <code>version2</code> branch will be slightly different than your <code>v2.0.0</code> tag since it will move forward with your new changes, so do be careful.</p><h3 id="2-10-Git-Aliases"><a href="#2-10-Git-Aliases" class="headerlink" title="2.10 Git Aliases"></a>2.10 Git Aliases</h3><p>Before we move on to the next chapter, we want to introduce a feature that can make your Git experience simpler, easier, and more familiar: aliases. For clarity’s sake, we won’t be using them anywhere else in this book, but if you go on to use Git with any regularity, aliases are something you should know about.</p><p>Git doesn’t automatically infer your command if you type it in partially. If you don’t want to type the entire text of each of the Git commands, you can easily set up an alias for each command using <code>git config</code>. Here are a couple of examples you may want to set up:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.co checkout</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.br branch</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.ci commit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.st status</span><br></code></pre></td></tr></table></figure><p>This means that, for example, instead of typing <code>git commit</code>, you just need to type <code>git ci</code>. As you go on using Git, you’ll probably use other commands frequently as well; don’t hesitate to create new aliases.</p><p>This technique can also be very useful in creating commands that you think should exist. For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.unstage <span class="hljs-string">&#x27;reset HEAD --&#x27;</span></span><br></code></pre></td></tr></table></figure><p>This makes the following two commands equivalent:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git unstage fileA</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset HEAD -- fileA</span><br></code></pre></td></tr></table></figure><p>This seems a bit clearer. It’s also common to add a <code>last</code> command, like this:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global alias.last <span class="hljs-string">&#x27;log -1 HEAD&#x27;</span></span><br></code></pre></td></tr></table></figure><p>This way, you can see the last commit easily:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git last</span><br>commit 66938dae3329c7aebe598c2246a8e6af90d04646<br>Author: Josh Goebel &lt;dreamer3@example.com&gt;<br>Date:   Tue Aug 26 19:48:51 2008 +0800<br><br>    Test for current head<br><br>    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;<br></code></pre></td></tr></table></figure><h2 id="三、Git-Branching"><a href="#三、Git-Branching" class="headerlink" title="三、Git Branching"></a>三、Git Branching</h2><h3 id="3-1-Branches-in-a-Nutshell"><a href="#3-1-Branches-in-a-Nutshell" class="headerlink" title="3.1 Branches in a Nutshell"></a>3.1 Branches in a Nutshell</h3><p>When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author’s name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.</p><p>To visualize this, let’s assume that you have a directory containing three files, and you stage them all and commit. Staging the files computes a checksum for each one (the SHA-1 hash), stores that version of the file in the Git repository (Git refers to them as <em>blobs</em>), and adds that checksum to the staging area:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add README test.rb LICENSE</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&#x27;Initial commit&#x27;</span></span><br></code></pre></td></tr></table></figure><p>When you create the commit by running <code>git commit</code>, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a tree object in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.</p><p>Your Git repository now contains five objects: three <em>blobs</em> (each representing the contents of one of the three files), one <em>tree</em> that lists the contents of the directory and specifies which file names are stored as which blobs, and one <em>commit</em> with the pointer to that root tree and all the commit metadata.</p><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/commit-and-tree.png" align="left" alt="A commit and its tree"><p>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</p><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/commits-and-parents.png" align="left" alt="Commits and their parents"><p>A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is <code>master</code>. As you start making commits, you’re given a <code>master</code> branch that points to the last commit you made. Every time you commit, the <code>master</code> branch pointer moves forward automatically.</p><blockquote><p>The “master” branch in Git is not a special branch. It is exactly like any other branch. The only reason nearly every repository has one is that the <code>git init</code> command creates it by default and most people don’t bother to change it.</p></blockquote><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/branch-and-history.png" align="left" alt="A branch and its commit history"><blockquote><p>Git keeps a special pointer called <code>HEAD</code>. In Git, this is a pointer to the local branch you’re currently on. </p></blockquote><h3 id="3-2-Creating-a-New-Branch"><a href="#3-2-Creating-a-New-Branch" class="headerlink" title="3.2 Creating a New Branch"></a>3.2 Creating a New Branch</h3><p> Let’s say you want to create a new branch called <code>testing</code>. You do this with the <code>git branch</code> command:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch testing</span><br></code></pre></td></tr></table></figure><p>This creates a new pointer to the same commit you’re currently on. <strong>In this case, you’re still on <code>master</code>. The <code>git branch</code> command only <em>created</em> a new branch — it didn’t switch to that branch.</strong></p><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/head-to-master.png" align="left" alt="HEAD pointing to a branch"><p>You can easily see this by running a simple <code>git log</code> command that shows you where the branch pointers are pointing. This option is called <code>--decorate</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --oneline --decorate<br>f30ab (HEAD -&gt; master, testing) Add feature <span class="hljs-comment">#32 - ability to add new formats to the central interface</span><br>34ac2 Fix bug <span class="hljs-comment">#1328 - stack overflow under certain conditions</span><br>98ca9 Initial commit<br></code></pre></td></tr></table></figure><p>You can see the <code>master</code> and <code>testing</code> branches that are right there next to the <code>f30ab</code> commit.</p><blockquote><p>Creating a new branch and switching to it at the same time</p><p>It’s typical to create a new branch and want to switch to that new branch at the same time — this can be done in one operation with <code>git checkout -b &lt;newbranchname&gt;</code>.</p></blockquote><blockquote><p>From Git version 2.23 onwards you can use <code>git switch</code> instead of <code>git checkout</code> to:</p><ul><li>Switch to an existing branch: <code>git switch testing-branch</code>.</li><li>Create a new branch and switch to it: <code>git switch -c new-branch</code>. The <code>-c</code> flag stands for create, you can also use the full flag: <code>--create</code>.</li><li>Return to your previously checked out branch: <code>git switch -</code>.</li></ul></blockquote><h3 id="3-3-Switching-Branches"><a href="#3-3-Switching-Branches" class="headerlink" title="3.3 Switching Branches"></a>3.3 Switching Branches</h3><p> Let’s switch to the new <code>testing</code> branch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout testing<br></code></pre></td></tr></table></figure><p>This moves <code>HEAD</code> to point to the <code>testing</code> branch.</p><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/head-to-testing.png" align="left" alt="HEAD points to the testing"><p>Well, let’s do another commit:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim test.rb<br>$ git commit -a -m <span class="hljs-string">&#x27;made a change&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/advance-commit-in-testing.png" align="left" alt="advance commit in testing"><p>This is interesting, because now your <code>testing</code> branch has moved forward, but your <code>master</code> branch still points to the commit you were on when you ran <code>git checkout</code> to switch branches. Let’s switch back to the <code>master</code> branch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout master<br></code></pre></td></tr></table></figure><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/checkout-master.png" align="left" alt="checkout to master"><p>That command did two things. It moved the HEAD pointer back to point to the <code>master</code> branch, and it reverted the files in your working directory back to the snapshot that <code>master</code> points to. This also means the changes you make from this point forward will diverge from an older version of the project. It essentially rewinds the work you’ve done in your <code>testing</code> branch so you can go in a different direction.</p><p>Let’s make a few changes and commit again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim test.rb<br>$ git commit -a -m <span class="hljs-string">&#x27;made other changes&#x27;</span><br></code></pre></td></tr></table></figure><p>Now your project history has diverged. You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work. Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you’re ready.</p><img src="https://ecifics-note-pic.oss-cn-chengdu.aliyuncs.com/git/advance-commit-in-master.png" align="left" alt="advance commit in master"><p>You can also see this easily with the <code>git log</code> command. If you run <code>git log --oneline --decorate --graph --all</code> it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --oneline --decorate --graph --all<br>* c2b9e (HEAD, master) Made other changes<br>| * 87ab2 (testing) Made a change<br>|/<br>* f30ab Add feature <span class="hljs-comment">#32 - ability to add new formats to the central interface</span><br>* 34ac2 Fix bug <span class="hljs-comment">#1328 - stack overflow under certain conditions</span><br>* 98ca9 initial commit of my project<br></code></pre></td></tr></table></figure><h3 id="3-5-Basic-Branching-and-Merging"><a href="#3-5-Basic-Branching-and-Merging" class="headerlink" title="3.5 Basic Branching and Merging"></a>3.5 Basic Branching and Merging</h3><p>[Basic Branching and Merging](<a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">Git - Basic Branching and Merging (git-scm.com)</a>)</p><h3 id="3-6-Branch-Management"><a href="#3-6-Branch-Management" class="headerlink" title="3.6 Branch Management"></a>3.6 Branch Management</h3><p>The <code>git branch</code> command does more than just create and delete branches. If you run it with no arguments, you get a simple listing of your current branches:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch<br>  iss53<br>* master<br>  testing<br></code></pre></td></tr></table></figure><blockquote><p>Notice the <code>*</code> character that prefixes the <code>master</code> branch: it indicates the branch that you currently have checked out (i.e., the branch that <code>HEAD</code> points to). This means that if you commit at this point, the <code>master</code> branch will be moved forward with your new work. </p></blockquote><p>To see the last commit on each branch, you can run <code>git branch -v</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -v<br>  iss53   93b412c Fix javascript issue<br>* master  7a98805 Merge branch <span class="hljs-string">&#x27;iss53&#x27;</span><br>  testing 782fd34 Add scott to the author list <span class="hljs-keyword">in</span> the readme<br></code></pre></td></tr></table></figure><p>The useful <code>--merged</code> and <code>--no-merged</code> options can filter this list to branches that you have or have not yet merged into the branch you’re currently on. To see which branches are already merged into the branch you’re on, you can run <code>git branch --merged</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch --merged<br>  iss53<br>* master<br></code></pre></td></tr></table></figure><p>Because you already merged in <code>iss53</code> earlier, you see it in your list. Branches on this list without the <code>*</code> in front of them are generally fine to delete with <code>git branch -d</code>; you’ve already incorporated their work into another branch, so you’re not going to lose anything.</p><p>To see all the branches that contain work you haven’t yet merged in, you can run <code>git branch --no-merged</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch --no-merged<br>  testing<br></code></pre></td></tr></table></figure><p>This shows your other branch. Because it contains work <strong>that isn’t merged in yet</strong>, trying to delete it with <code>git branch -d</code> will fail:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -d testing<br>error: The branch <span class="hljs-string">&#x27;testing&#x27;</span> is not fully merged.<br>If you are sure you want to delete it, run <span class="hljs-string">&#x27;git branch -D testing&#x27;</span>.<br></code></pre></td></tr></table></figure><blockquote><p>If you really do want to delete the branch and lose that work, you can force it with <code>-D</code>, as the helpful message points out.</p></blockquote><h4 id="Changing-a-branch-name"><a href="#Changing-a-branch-name" class="headerlink" title="Changing a branch name"></a>Changing a branch name</h4><p>Suppose you have a branch that is called <code>bad-branch-name</code> and you want to change it to <code>corrected-branch-name</code>, while keeping all history. You also want to change the branch name on the remote (GitHub, GitLab, other server). </p><p>Rename the branch locally with the <code>git branch --move</code> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch --move bad-branch-name corrected-branch-name<br></code></pre></td></tr></table></figure><p>This replaces your <code>bad-branch-name</code> with <code>corrected-branch-name</code>, but this change is only local for now. To let others see the corrected branch on the remote, push it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push --set-upstream origin corrected-branch-name<br></code></pre></td></tr></table></figure><p>Now we’ll take a brief look at where we are now:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch --all</span><br>* corrected-branch-name<br>  main<br>  remotes/origin/bad-branch-name<br>  remotes/origin/corrected-branch-name<br>  remotes/origin/main<br></code></pre></td></tr></table></figure><p>Notice that you’re on the branch <code>corrected-branch-name</code> and it’s available on the remote. However, the branch with the bad name is also still present there but you can delete it by executing the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin --delete bad-branch-name<br></code></pre></td></tr></table></figure><p>Now the bad branch name is fully replaced with the corrected branch name.</p><blockquote><p>Do not rename branches that are still in use by other collaborators. </p></blockquote><h4 id="Changing-the-master-branch-name"><a href="#Changing-the-master-branch-name" class="headerlink" title="Changing the master branch name"></a>Changing the master branch name</h4><blockquote><p><strong>Warning: Changing the name of a branch like master&#x2F;main&#x2F;mainline&#x2F;default will break the integrations, services, helper utilities and build&#x2F;release scripts that your repository uses. Before you do this, make sure you consult with your collaborators. Also, make sure you do a thorough search through your repo and update any references to the old branch name in your code and scripts.</strong></p></blockquote><p>Rename your local <code>master</code> branch into <code>main</code> with the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch --move master main<br></code></pre></td></tr></table></figure><p>There’s no local <code>master</code> branch anymore, because it’s renamed to the <code>main</code> branch.</p><p>To let others see the new <code>main</code> branch, you need to push it to the remote. This makes the renamed branch available on the remote.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push --set-upstream origin main<br></code></pre></td></tr></table></figure><p>Now we end up with the following state:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch --all<br>* main<br>  remotes/origin/HEAD -&gt; origin/master<br>  remotes/origin/main<br>  remotes/origin/master<br></code></pre></td></tr></table></figure><p>Now you have a few more tasks in front of you to complete the transition:</p><ul><li>Any projects that depend on this one will need to update their code and&#x2F;or configuration.</li><li>Update any test-runner configuration files.</li><li>Adjust build and release scripts.</li><li>Redirect settings on your repo host for things like the repo’s default branch, merge rules, and other things that match branch names.</li><li>Update references to the old branch in documentation.</li><li>Close or merge any pull requests that target the old branch.</li></ul><p>After you’ve done all these tasks, and are certain the <code>main</code> branch performs just as the <code>master</code> branch, you can delete the <code>master</code> branch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin --delete master<br></code></pre></td></tr></table></figure><h3 id="3-7-Remote-Branches"><a href="#3-7-Remote-Branches" class="headerlink" title="3.7 Remote Branches"></a>3.7 Remote Branches</h3><p>[Remote Branches](<a href="https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches">Git - Remote Branches (git-scm.com)</a>)</p><h4 id="Tracking-Branches"><a href="#Tracking-Branches" class="headerlink" title="Tracking Branches"></a>Tracking Branches</h4><p>Checking out a local branch from a remote-tracking branch automatically creates what is called a “tracking branch” (and the branch it tracks is called an “upstream branch”). Tracking branches are local branches that have a direct relationship to a remote branch. If you’re on a tracking branch and type <code>git pull</code>, Git automatically knows which server to fetch from and which branch to merge in.</p><p>When you clone a repository, it generally automatically creates a <code>master</code> branch that tracks <code>origin/master</code>. However, you can set up other tracking branches if you wish — ones that track branches on other remotes, or don’t track the <code>master</code> branch. The simple case is the example you just saw, running <code>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>. This is a common enough operation that Git provides the <code>--track</code> shorthand:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout --track origin/serverfix<br>Branch serverfix <span class="hljs-built_in">set</span> up to track remote branch serverfix from origin.<br>Switched to a new branch <span class="hljs-string">&#x27;serverfix&#x27;</span><br></code></pre></td></tr></table></figure><p>In fact, this is so common that there’s even a shortcut for that shortcut. If the branch name you’re trying to checkout (a) doesn’t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout serverfix<br>Branch serverfix <span class="hljs-built_in">set</span> up to track remote branch serverfix from origin.<br>Switched to a new branch <span class="hljs-string">&#x27;serverfix&#x27;</span><br></code></pre></td></tr></table></figure><p>If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you’re tracking, you can use the <code>-u</code> or <code>--set-upstream-to</code> option to <code>git branch</code> to explicitly set it at any time.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -u origin/serverfix<br>Branch serverfix <span class="hljs-built_in">set</span> up to track remote branch serverfix from origin.<br></code></pre></td></tr></table></figure><p>If you want to see what tracking branches you have set up, you can use the <code>-vv</code> option to <code>git branch</code>. This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -vv<br>  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets<br>  master    1ae2a45 [origin/master] Deploy index fix<br>* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should <span class="hljs-keyword">do</span> it<br>  testing   5ea463a Try something new<br></code></pre></td></tr></table></figure><p><strong>branch is X commits behind</strong> means that there are X new (unmerged) commits on the branch which is being tracked by your current branch.</p><p><strong>branch is X commits ahead</strong> analogously means that your branch has X new commits, which haven’t been merged into the tracked branch yet.</p><p>Once you’ve pulled (thereby merging the remote changes into your local ones) and pushed (thereby publishing your changes and the merge to the remote), your own branch and the remote branch will point to the same commit, so neither is ahead or behind.</p><h3 id="3-8-Rebasing"><a href="#3-8-Rebasing" class="headerlink" title="3.8 Rebasing"></a>3.8 Rebasing</h3><p><a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing">Git - Rebasing (git-scm.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索技术</title>
    <link href="/2023/12/25/%E6%90%9C%E7%B4%A2%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/12/25/%E6%90%9C%E7%B4%A2%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索技术"><a href="#搜索技术" class="headerlink" title="搜索技术"></a>搜索技术</h1><h2 id="Google-搜索语法"><a href="#Google-搜索语法" class="headerlink" title="Google 搜索语法"></a>Google 搜索语法</h2><h3 id="1-限定关键词"><a href="#1-限定关键词" class="headerlink" title="1. 限定关键词 &quot;&quot;"></a>1. 限定关键词 <code>&quot;&quot;</code></h3><p>如果我们要准确的搜索某一个关键词，例如圣诞之吻，我们可以用双引号<code>&quot;&quot;</code>包括关键词进行搜索，搜索出来的内容一定包含双引号里面的内容，并且是完整的没有打乱顺序的方式呈现，例如</p><p><code>&quot;圣诞之吻&quot;</code></p><blockquote><p>“圣诞之吻”搜索出来的结果一定是包含圣诞之吻的，不会出现<em>吻之圣诞</em>这种乱序的结果</p></blockquote><h3 id="2-限定标题-intitle"><a href="#2-限定标题-intitle" class="headerlink" title="2. 限定标题 intitle"></a>2. 限定标题 <code>intitle</code></h3><p>如果我们想要搜索出来的内容标题包含某些特定的关键字，可以使用<code>intitle:</code>加上关键词的形式去搜索，例如</p><p><code>intitle:iPhone15摄像头进灰</code></p><blockquote><p><code>intitle:iPhone15摄像头进灰</code> 搜索结果中 <em>iPhone15摄像头进灰</em> 这几个关键字是可以乱序出现的，比如有搜索结果*<a href="https://www.bilibili.com/video/BV1Xm4y157WH/">发现摄像头进灰！有了这套iPhone15开箱技巧，有问题它跑不了</a>*</p><p>但是如果换成 <code>intitle:&quot;iPhone15摄像头进灰&quot;</code>， 搜索结果中 <em>iPhone15摄像头进灰</em> 这几个关键字是不会乱序出现的</p></blockquote><h3 id="3-限定标题多个关键词-allintitle"><a href="#3-限定标题多个关键词-allintitle" class="headerlink" title="3. 限定标题多个关键词 allintitle"></a>3. 限定标题多个关键词 <code>allintitle</code></h3><p>如果标题中需要包含多个关键字，可以使用<code>allintitle</code>进行限定，例如</p><p><code>&quot;allintitle: 李子柒回归 微念 和解&quot;</code> </p><h3 id="4-限定内容关键词-intext"><a href="#4-限定内容关键词-intext" class="headerlink" title="4. 限定内容关键词 intext"></a>4. 限定内容关键词 <code>intext</code></h3><p>如果需要文章内容中包含关键字，可以使用<code>intext</code>进行限定，例如</p><p><code>intitle:&quot;ELON MUSK&quot; intext:&quot;SpaceX Starship Update&quot;</code></p><h3 id="5-限定搜索结果网址关键词-inurl"><a href="#5-限定搜索结果网址关键词-inurl" class="headerlink" title="5. 限定搜索结果网址关键词 inurl"></a>5. 限定搜索结果网址关键词 <code>inurl</code></h3><p>如果需要限定内容来源的网址中必须包含某些关键字，可以使用<code>inurl</code>进行限定，例如</p><p><code>李子柒 inurl:cctv</code></p><h3 id="6-限定搜索结果的域名-site"><a href="#6-限定搜索结果的域名-site" class="headerlink" title="6. 限定搜索结果的域名 site"></a>6. 限定搜索结果的域名 <code>site</code></h3><p>如果只想获取某个域名下的搜索结果，可以使用<code>site</code>进行限定，例如：</p><p><code>李子柒 site:cctv.com</code></p><h3 id="7-限定图片尺寸-imagesize"><a href="#7-限定图片尺寸-imagesize" class="headerlink" title="7. 限定图片尺寸 imagesize"></a>7. 限定图片尺寸 <code>imagesize</code></h3><p>如果需要限定搜索结果中的图片尺寸，可以通过<code>imagesize</code>进行限定，例如：</p><p><code>elon musk imagesize:2560x1440</code></p><h3 id="8-限定文件格式"><a href="#8-限定文件格式" class="headerlink" title="8. 限定文件格式"></a>8. 限定文件格式</h3><p>如果需要限定搜索结果的文件格式，可以通过<code>filetype</code>进行限定，例如：</p><p><code>大语言模型 filetype:pdf</code></p><p><code>小猫 filetype:png</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
